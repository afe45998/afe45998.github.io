<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>暗黑2——死灵法师攻略</title>
    <url>/2023/01/09/Diablo2%20NEC/</url>
    <content><![CDATA[<h1 id="Attribute-Allocation"><a href="#Attribute-Allocation" class="headerlink" title="Attribute Allocation"></a>Attribute Allocation</h1><p>Level 2-3: All into Energy<br/></p>
<p>Level 4-11: All into Vitality<br/></p>
<p>(When accumulating 3500g, shop at Akara for A wand that adds plus to teeth )<br/></p>
<p>Level 12-13: All into Strength<br/></p>
<span id="more"></span>
<p>(Kill the countess for rune 1 Tal, 1 Eth, before that see if Charsie is selling a non-magic two-socket body armor and a non-magic two-socket helm. Keep farming the countess for two tier runes Tir, Tir and insert them into a two-socket helm )<br/></p>
<p>Level 21: 47 Strength<br/></p>
<h1 id="Skill-Points"><a href="#Skill-Points" class="headerlink" title="Skill Points"></a>Skill Points</h1><p>Level 1-5: All into Teeth</p>
<p>Level 6: 1 Clay Golem</p>
<p>Level 7-10: All into Teeth</p>
<p>Level 11: 1 Amplify</p>
<p>Level 12: 1 Iron Maiden</p>
<p>(Hit ACT2 buy a belt from Pharah)</p>
<p>Level 14-16: 1 Bone Armor, rest into Bone Wall</p>
<p>Level 17: TALRTH armor STEALTH</p>
<p>Level</p>
]]></content>
      <categories>
        <category>游戏</category>
      </categories>
      <tags>
        <tag>暗黑2</tag>
      </tags>
  </entry>
  <entry>
    <title>2022的新年</title>
    <url>/2022/02/05/2022%E7%9A%84%E6%96%B0%E5%B9%B4/</url>
    <content><![CDATA[<p>这是我们相识几天之后，我想开始记录的日子，而我对这份感情的走向却丝毫不知何种结果。</p>
<h1 id="二月"><a href="#二月" class="headerlink" title="二月"></a>二月</h1><h2 id="四"><a href="#四" class="headerlink" title="四"></a>四<br/></h2><p>新年之初，我认识了一个很可爱的男生，他与我同岁。那是第一次见面的下午，因为明天他就要去医院上班了，所以他提出的去到植物园去看一看。刚巧赶上我去亲戚家玩，接到我的一路上他侃侃而谈，车里的氛围很是舒服。他的脸被口罩遮住，但是侧颜的络腮胡茬仍是透出性感，我内心期待着褪下口罩的样子。他戴着眼镜，却不是显出斯文的感觉，而是由面相生出一种憨厚可爱而又帅气的感觉，健康的肤色泛着光泽，皮肤状态显得稚嫩很多。很快到达目的地，两个人并排尴尬地散着步，他却总是能不着痕迹的提出者着新的话题，一向不怕生我的反而不知道要说些什么。在天空满是风筝飞翔的寒冷冬季，一个个和谐安详的家庭，此时的我们两个男生好像显得格外另类，而内心却莫名怦然心动。这简单的第一次见面，直到各自回到家，他才告诉我他其实是一个内向的人。惊讶之余，我才能慢慢感觉到他克服主动与我聊天所做出的努力。在线上的聊天里我厚着脸皮表达着我的真实感受，这份对他的心悦来的有些突然，我也想不出什么原因。只是，他消息回复得简短并且模棱两可，我却始终怀揣着激动，但又难免暗自神伤，在小蓝上不停的互动只为了试探出他对我的感受。我相信一见钟情，但不曾相信这种恩赐与幸运能否能降落于我。<span id="more"></span><br>我们彼此添加了QQ好友。在我看来，这说明他对我是存在着一丝好感的，那我便要紧紧抓住。记得那天我们第一次在小蓝上互换照片，他对我的评价是沧桑，经历了考研与论文的折磨，这份评价确实中肯。我迫不及待地翻看了他的QQ空间，上一则说说已经停留在了2018，之后便再无更新。而在这之前，我也并不能通过屈指可数的动态数量更加深刻地了解这个人，只想着他只当QQ作为聊天工具罢了，并且也已经加入了微信的用户行列。不曾想，一则动态看到了了来自我初中同学的点赞，他们是高中的同班同学。哈哈，这应该是小小的缘分。这天晚上我们还一直聊着天，虽然也是一句搭一句。我始终觉得，这么善良而又可爱的人儿，怎么会还是单身。于是厚着脸皮，我去询问了他的恋爱故事，只当是彼此互相了解了解。他大方的谈到了这份跨越了大学时代5年的恋爱，两个人异地恋的经历的辛苦只有他们俩人体会，我不曾感受过，只有敬佩。他说分开的原因是没了感情，谁也不喜欢谁了，但是我想，一个人陪伴了自己5年之久，笑亦是他，苦亦是他，让我也着实难以忘却。直到半夜10点多，我们还在有一句没一句的闲聊。后来才了解到，他第一面觉得我太过正经了，所以没有提到他的感情故事。只可惜，他今晚有个与朋友的聚餐，我们之后便分开了。记我们的初见。</p>
<h2 id="五"><a href="#五" class="headerlink" title="五"></a>五<br/></h2><p>这天早上，他跟我分享了一觉醒来只剩下内裤的灵异事件，难不成他还有裸睡的习惯。今天他去到医院开始新年后第一天的工作，可能不太忙，我们闲聊了一会，商议着下午结束工作后的计划。当提到了下午去洗澡的时候，我眼睛冒光。只是我们这样的小县城不曾有太多包括单间的大澡堂，洗澡泡汤了。出人意外的是，下班后，他不回家了直接驱车来我家，而我对接下来事情的发展不敢有过分出格的想法，这一待便是几个小时。:):):)哈哈哈。离开后，我们二人去吃了躺兰州拉面，味道出奇的好吃，可能也是能跟喜欢的人一起吃饭的缘故吧。吃饭闲聊间，我们彼此更加畅谈了些，聊了更多关于家庭的小故事。二人分开后，他回到家中还要吃些感冒药，天气寒冷，可能是之前不经意着凉了。他家安装了暖气，过年间他把房间让给了家人，屈身睡在了客厅沙发床上，属实怪可怜的。没想到他是个怕冷不怕热的人，也是，身上暖和和的，手却有些凉意。晚上聊天，我忍不住好奇他的个人喜好，这样或许我们能有些共同分享的话题与爱好。聊天、刷抖音、看电视，有时候出去吃吃饭，是我也向往而又喜欢的简单平淡的日子。也是这会，他向我推荐了一部爱情故事————《假如爱有天意》，甚至称得上是早年高分纯爱电影，讲述了父母爱情的伊始，却是意难平的结局，但这缕缘分终在二人的子女身上画上了完整的句号。希望我们的相遇也是种缘分吧。另一个叫做《请回答，1988》，同样是部高分电视剧，就择日再看吧。</p>
<h2 id="六"><a href="#六" class="headerlink" title="六"></a>六<br/></h2><p>今天上午计划去相亲，如过场一般的形式就此略过，不愿辜负别人女孩，也不愿负我这余生。初六，人们褪去了春节的热潮，开始了新一年的复工。他也逐渐忙碌起来，我也知道这才是人的常态，可我却总想着能跟他有着更多的交流。不能总是相遇，就盼着闲暇多些言语。没想到，他也喜欢漫威电影，之前与同学去看了复联4，这下我们的喜好又多了一些交叉。下午闲聊时，他又给我推荐了《来自星星的你》，又是部韩剧哈哈哈，看来他可能是个心思细腻的男生。这不，他还养了两只小母猫，其中一个还是刚诞下几个月的小猫咪。他相片里还保存了一张两三年的老照片，出自《断背山》里的杰克的那件沾血的旧衣服，挂在衣柜上，仿佛人还在身边。他与我的聊天依然是简短的你问我答式消息，而我仍然捉摸不透他对我的感觉，但是我这些天我提出出来见面的要求他一一满足，内心欢喜之余也不知为何担心着。这天晚上一起去泡了澡，但并未做出任何出格之事，沐浴之后的清爽显得他格外帅气。在这之后我们来回去了两个商场逛了逛，为了给他侄女儿买几个盲盒，他步伐稳健，走的甚至比我还快，这幅对亲人十分上心的样子不断散发着人格魅力。小县城并没有什么所谓的夜生活，时间却依然过的非常快，5点下班到分别之时的9点，4个小时的陪伴转瞬即逝。这些天的交流，始终让我有一种活在梦里的感觉，他的模样与性格吸引着我，让我不知所措。还得知了他是名周杰伦的粉丝，听的歌曲多是我未曾了解过的，甚至连微信朋友圈也没有过多的个人生活动态。神秘的他，令人神往。对此，我没有太多要求，只希望我们每次见面，时间能温柔且过的缓慢些。</p>
<h2 id="七"><a href="#七" class="headerlink" title="七"></a>七<br/></h2><p>今天一早不到八点，他与我道早安，只是我知道九点才起床回复他的消息。得知，他一早开往去了郑州，这可是长达三个多小时的车程，原来是请假接他的姐姐回家去了。他一路载着父母，接到姐姐，又不停歇地开到了下午两点才回到家中吃午饭。好在，他请了一天的假，这个下午能好好地补补觉，我除了心疼，便只剩下对他的坚强由衷地感到敬佩。明明只是一个24岁的大孩子，这一路奔波仿佛是他早已习惯的生活，看到为家人操心付出的他，我想着晚上是不是能给他送些东西。午后下起了漫天小雪，他们一家其乐融融，打算晚上搓会儿麻将。他的咳嗽依然没有好透，后来我才知道，自高二开始，每逢冬季都会出现这种情况，不知是冷空气的影响还是别的什么原因，巧的是，我也犯起了咳嗽。到了晚上，我跟我父亲打算开车出去商场买些东西。记得他昨天对我们逛商场时我试用的一种香薰喷雾的味道有着不错的评价，正巧他们几个人热闹地玩会游戏，我便打算买点小吃与香薰，装进礼品袋中再赠与他，让这个小礼物显的有些仪式感，虽说是匆匆忙忙准备，但我当时想着力所能及之事便是给他这样一个小惊喜。打完麻将，他今天可算是能暂时回到里屋睡觉了。之前得知他有在准备着河南省的公考，我对这些信息没有太多了解，但是看到他有在忙里偷闲努力地学习备考，这亦是更增加了我对他的怜爱与尊重。</p>
<h2 id="八"><a href="#八" class="headerlink" title="八"></a>八<br/></h2><p>今天他上班闲暇间，我们聊到了油价，不可避免地谈到了汽车。他这些年钟爱一款特斯拉Model 3电车，只是我对汽车不太感兴趣，便只能当个倾听者。看到我们聊天内容更加丰富，也十分乐意去得知了一些他更多的爱好。下午他告诉我谷歌账号密码不记得了，我这才得知他也刷推特，油管。并且他的谷歌邮箱用户名出现了117676这串数字，我并不了解是何种含义。自从我跟他分享过我母亲的故事，他就格外好奇，那我这种行为算是利用家人撩汉吗，亦或者，他是对我的生活感兴趣，还是仅仅想来占上一卦。晚上，他继续搓起了麻将，尽管我查看了老黄历财神方位，他还是输多于赢，想来是他的家人实力过强吧。:)哈哈。这些天我不清楚这些心动能不能称得上是单相思，因为想跟他在一起的单纯目的远远大于身体的欲望。咳，只是这些天断断续续情感被他左右，总是在手机旁等着他的聊天消息，从未有过像这样期盼着手机提示音的响起，而我总归也要有自己的生活节奏。这段时间我仿佛身在梦里。</p>
<h2 id="九"><a href="#九" class="headerlink" title="九"></a>九<br/></h2><p>今天一如既往，他总能腾出时间与我道上早安。我每天醒来总能被他贴心的言语打动，他打趣道，外甥天天一早哭闹，吵醒了一大家子。我总是想主动去了解他闲暇时刻的爱好，这样，无论如何我们总能有更多的话题去了解彼此。他没事的时候喜欢刷抖音，我想这应该也是很多现代人喜欢做的事情。这个上午，他似乎是对占卜之事分外好奇，也曾找人看过，那人看他手相说他是花钱的命。我把这理解为是好事，不求一生富贵命，但总能有钱花，我已满足。直到今天，我才开门见山，询问他为何总是会对我表示出害羞的情绪。他道出了一段，我认为是这些天来真正的肺腑之言。同时就是在此刻，更加让我坚信了他为人的善良。<font color="#d25858">他谈到有时会刻意回避与我的接触，是不想让我对他有过太多暧昧的情愫，这会让他感到不好意思，害怕担心着我们发展成恋爱关系，毕竟朋友要比恋人走的更远更长久，另外，我们处在这个年纪要不了两三年可能就会结婚，当个好朋友就很好了，没事可以解决一下需求。他担心着我对他付出太多感情，最后却辜负了我。</font>通过这字里行间，展现出的是这个男人多么善解人意的一面。我打字回复到，也是如此看法，两人达成了共识。但正是这么温柔的只言片语，也难掩我被拒绝的事实，我心里当时便是这样所想。我未曾谈过恋爱，只是这些话语，总让我觉得不是一般滋味。他谈过五年的异地爱恋，所经历的挫折重重，我想象不到他为了这份坚守，背后的努力与辛酸。我能理解，朋友的陪伴长久于恋人。但我还是如此幼稚，嘴边重复着朋友二字。<font color="#d25858">而后他谈到为何认为会辜负我的缘由，他害怕未来某一天与前任复合，毕竟五年的陪伴，人生的1/5岁月，这段回忆总会充斥着快乐，让他们想到曾经的彼此。</font>他用到“害怕”这两个字,因为害怕未来会复合，而辜负了我，所以才有了这些天的回避。为何他总是用最温暖的话，让我如飞蛾般奋不顾身地冲向他的光热。我甚至有些不满，他这样的人，为什么良人未能常伴其身，为什么上天要使他历经这异地磨难。理应是天降大任于斯人罢了。每次看到他侧颜的胡茬，莫名的荷尔蒙气场便始终吸引着我。无奈，他本人想祛除掉。晚上待他下了班，我们又见面了，绕着不远不近的路，聊着有的没的，十分惬意。</p>
<h2 id="十"><a href="#十" class="headerlink" title="十"></a>十<br/></h2><p>今天上午看得出来他比较轻松，但一直准时准点上下班，敬业的样子总是这么富有魅力。午饭闲聊时，考虑元宵节即将临至，心里想着买些烟花到那天晚上与他共赏，他的回复听上去也很期待。天未渐暖，已感春至。他打算买个山地车，这样上班时还能锻炼锻炼身体，他对腹肌的执念过于深重，而这也引出了我对去健身房的想法。我了解到，他去年在郑州工作一年的生活，他在抖音上观看了4700个美食视频，超过了97.9%的人，已然算是个行家了，样样厨艺精通。:)哈哈。他的这份坚持与毅力，让我始终认为，他绝对配得上拥有八块腹肌。没曾想，他与对象去到过健身房，只可惜，并未坚持下来。我自恃不是一个有着毅力的人，但为了喜欢的人，我却能坚持下去，与他共勉，完成蜕变。这个晚上我去了几家健身房，咨询信息，他也同意了重回健身房的想法。又到了深夜闲聊时侯，他表示如果在外地有房，就不会回家了。我想，他是一个敢于在外拼搏闯荡的人，只是，他回答道这份激情会逐渐被生活所泯灭。他在外地曾经打拼了许久，大小公司都见过形形色色之人，看淡了生活，不想着挣那么多的钱，但求一份早九晚五双休的工作就已满足。只是我仍然想着，他绝不会是一个轻言放弃的人。这个晚上，我们聊了许多，有洪水、疫情。他的内心脆弱敏感，外表却挺拔如松，是一个善良而又孤独的人啊。<font color="#d25858">他说到，曾经去爬山，邂逅一场风景，心中只想将眼前所见分享心爱之人，只是在那个片刻他的身边未有良人在侧。</font></p>
<h2 id="十一"><a href="#十一" class="headerlink" title="十一"></a>十一<br/></h2><p>今天是个我早已期待许久的日子，他要来我家进行占卜之事。上午闲聊时，我又主动问询了他关于理想生活的追求，亦或者是接下来的向往。他回答道，如果两个人彼此相互喜欢而又年轻，凭着那种劲头就可以外出打拼，年纪大了就要考虑点实际，不该那么飘着了。但问到深处，他也很迷茫，既不想结婚，也不知道如何选择接下来的道路，有种坐以待毙的感觉。下午他赶来到我家附近送材料，我带着点东西便想去陪他坐会。现在正值草莓香甜，只可惜我没有给他带些。我们聊了聊关于省考的事情，他三月二十六考试，他此次是要参与报名的。但是，家里竞争依然激烈，岗位较少，还是有很大难度的。我只愿他能良好发挥，尽力而为，神佛保佑。晚上，他们家搓了麻将，他说道明天再到我家坐坐，顺便来吃顿早饭。我现在只想尽快把车练好，让我家人和他放心，这样以后也方便接送他。于是，我们便就谁开车这个问题开始了漫长的推搡。:)哈哈。我只想让他别那么累，能给予我一些信任。直到最后还是商定，明天他驱车前来。我能说些什么，只是想着自己还是太菜了。:(</p>
<h2 id="十二"><a href="#十二" class="headerlink" title="十二"></a>十二<br/></h2><p>这天早上，我定了六点的闹钟，只为不错过他的任何消息。但是到了约定的八点，他得带着他母亲买些元宵节要用的东西。其实，只要能见到他，我不在乎什么时候。我一直都想着到他家去见见他生活的环境，想着借此是否能更加了解这个人。插一句，之前买的双色球并未中奖，但是也总要有能中大奖的期盼。:)哈哈。上午，他回家后便小憩了一会，此时的我只想化身猫咪陪他身边。午间，看到他协助母亲炖的鸡汤，我甚至难以抑制口水，除了汤还有他。午后，他彷佛变成了第三只小猫，躺在暖阳下，做个美梦。一想到他等会的到访，我只想直接跳过这顿火锅。三点零八，他来了。待母亲准备就绪，从“他们”口中我了解到，他的的确确是个善良的孩子，照顾家人，努力工作，不耍心眼。母亲在他走后对我说，这个孩子是位值得深交的人。就凭这几番话，足以让我彻底用心去珍惜这段友谊。美好的时光总是过得飞快，无论何人都会有离别，我只能这样安慰自己。毋须多言，这份快乐我始终铭记。临别之际，他终于听了我的推荐，买了我家门口小摊的烤年糕、肥肠和鸡翅等等，他执意要赠我一些，还是拗不过他。其实啊，只是听到心上人的一句肯定，看到他嘴角的一轮酒窝，便已如沐春风，胜过几许暖光。分别之后他回到家后，与朋友玩会游戏，得知他身边已有众人相伴，我只好重回于自己的事情。喜欢一个人，一定是要给予对方自由，不能打乱他的生活节奏，我是懂得这点的。我已不知这是第几夜的无名烦闷，但我清楚地知道一切因他而起。连续几个晚上，我与他倾诉衷肠，却只觉无病呻吟。我早已承认，喜欢上了他。<font color="#d25858">他的话一如既往的忠言顺耳，不用考虑那么远，不要想那么多，脚下的路还长着。</font>他们说爱一个人，会舍得放手。那像他这么好的人，是天上星辰，坠落人间一遭，让我怎么舍得。</p>
<h2 id="十三"><a href="#十三" class="headerlink" title="十三"></a>十三<br/></h2><p>一早起来，清空思绪，或许不想太多，简单点，对他好就够了。也许这样，就能慢慢成为长久的亲密朋友。他上班闲暇时与我说道，他母亲想把大猫咪送走，毕竟，抚养这两只小家伙总是要花不少钱的。我是多么想接下这份责任，只可惜不太会养小动物。并且，动物是有灵气和感情的，小猫咪一定也不愿离开他。上午他忙碌地工作，我却缠着他索要初见时的照片。毕竟，那是我们故事的开始。我一直奇怪，他虽然不愿将自己的生活分享给不认识或者不亲密的人，但他身边应该是有着满满的关心他的朋友。他回答道，社恐，不好意思发朋友圈。说到这里，我回去翻看了他高中时期的动态记录，那时的他，好像会时不时借助节日来表露心情，但始终不曾相关到个人生活。<del>我猜想，也许曾经因为这个特殊的身份而有些自卑引起的内心孤独，但同时也渴望别人的关注与认同，却又不想因为所发表的内容给大家增添麻烦，最终选择封闭了自我。</del> 只是猜着猜着，便将自己的内心写照投射出来了。他中午一个人在加班，只得点了份外卖，还没法休息。看到他点的烤肉饭又额外加了肉，我忍不住吐槽他腹肌怕是不想要了，毕竟之后还要减脂。再一想到昨天深夜又跟他聊了许久，他从大清早要忙到下午五点，这期间肯定会困的。于是我中午打算去给他带杯咖啡，解解乏，陪他聊聊天，结果被父亲开走的车到了三点才回来。我没告诉他安排便拿上驾驶证就立刻出发了，结果导航到了曾经的旧址，我这个大路痴只得跟他坦白了这个小惊喜，最终折腾到四点半才到了他那。一进门，我满眼都是他伏案认真工作的样子，连手啥时候流血了都不知道。我坐在一旁，懊悔着路上耽搁了太久。他忙碌地做好每一件事，帮助每一个有需要的人，我只是看着，他的身影就足以让人倍感踏实与安心。<font color="#d25858">这是我第一次看到他工作时候的状态。</font>今天晚上，我又一次跟他吐露盘踞内心的痛苦之源，每每的深夜EMO，总是在他的下班后。他要是个渣男那该多好，我就不会吃醋，不会伤心，不会再掺杂太多情愫，然而，他不仅不是，相反，更是个让人无法不心动、无法忘却的大好人。他主动问到，他要是个渣男了，我是否就不会心动了。唉，这个问题的答案显而易见，我最没有必要欺骗自己的真实感受。<font color="#d25858">第一眼心动的是外表，第二眼心动的是品质，在那之后，每当再看到他的照片，跟他有更多的交流与接触，便已是次次心动。</font>我想，就如他所说，脚下的路还长远，那就彼此共勉。</p>
<h2 id="十四"><a href="#十四" class="headerlink" title="十四"></a>十四<br/></h2><p>这天是国际情人节，他忙了一上午，甚至去厕所的工夫都没有。到了中午他回复道，今天有几百对儿有情人在那做婚检核酸，根本闲不下来。同时，领导又安排下午提前一个小时过去，他匆匆吃过饭后便继续投身到工作中去了。下午没有聊太多，只知道他是忙忙碌碌。晚上等待他下班的消息时才了解到他去赴了朋友们的饭局，并且还是打车去的。一想到他没让我去接送而且可能还不信任我的开车技术，我就有些失落。我始终相信，信任是需要慢慢建立的，我可以等。令人意外的是，可能赶在情人节吃饭的人格外的多，他们等了一个多小时才上饭菜，而他也喝了杯白酒。正巧这时候，领导让他赶回去加班，人员数据太多得尽快录入。此时，我只想开车去送他到单位。他尽快解决用餐，好好的饭局，就吃了半个多小时就得离开，之后又等了十分钟的出租车，终于出发了。接下来便是漫长的加班，几百份数据的导入工作大多数都是浪费了人力物力资源产生的结果（并不是每个学生都需要做核酸检测的）。如此多的工作量，我想着待他11点下班后开车送他回家。谁曾想最后他忙到了第二天凌晨两点。这是我第一次陪着他许久，内心欢喜之余更多的是心疼，他们十几个人完成上千份数据的手动录入，每个人都加班到很晚。深夜我已感疲倦，他连续忙碌两天，也小酌一杯，身体更是需要休息。我只有尽我所能，帮他分担一点工作，望他尽量早些时候下班，回去多睡一会。或许生活本就是这样的吧。不过，借助这次忙碌的机会，我终于拿到了他的微信。:)</p>
<h2 id="十五"><a href="#十五" class="headerlink" title="十五"></a>十五<br/></h2><p>今年的元宵节紧跟情人节而至，这却意味着他的工作亦是繁忙。不出所料，敬业的他按时起床，跟我道了早安，我回复消息后，等待途中便直接睡着了。而他，尽管有些头晕和精神恍惚也强打精神赶去工作。我醒来后打算下午给他带杯咖啡，缓解一下疲劳，然而车又被开走了，只得作罢。虽然下午四点多他便下了班，但这几日的连续高强度工作确确实实折磨人的身体，他甚至觉得有些腰疼。我想跟他一起去泡个澡，去公园遛遛弯，只是，他急需补足精神，回到倒头便睡了。醒来吃过晚饭，没聊几句，他便再次回房间去休息了。直到深夜，他被家人吵醒，但又很快入睡。足以见得，这些天让他多么疲倦。我只觉得，这一切都是其单位上级人员下发的指令有太多不合理的地方，进而导致这一系列多余而又累人的工作量。</p>
<h2 id="十六"><a href="#十六" class="headerlink" title="十六"></a>十六<br/></h2><p>今天他依旧是忙碌的一整天，甚至又一次加班到很晚，差不多到了十一点。而我们也只是重复着简单的你问我答式聊天。这几日他的加班，让我想到那些因为工作而减少二人联系，慢慢导致感情变得寡淡的事例。难免我对我们的关系也产生了些许担忧。人与人之间一但减少了密切地交流，选择过着君子之交淡如水般的来往，我想迟早可能也会磨灭掉曾经的那份感情。因此无论如何，我愿尽我所能伴他左右。</p>
<h2 id="十七"><a href="#十七" class="headerlink" title="十七"></a>十七<br/></h2><p>几日不见，倍是想念。经过了这几日的忙碌波折，今晚终于有机会出来一起走走了。只是，他们家在搓麻将，不好抽身。于是，他便邀请我到他家去观战。听到这个邀约，比我买彩票中奖更加激动，这意味着我能够见到他的家人，混个眼熟。这种机会可不是买彩票能得到的。:)哈哈。平常二十多分钟的路，我这下走得更快了。如愿见到他生活的环境还有他的家人，我满心欢喜。他早已帮我搬好了凳子，我便坐他身边“出谋划策”，也看到了他细心照顾的可爱的小猫。两个小时的愉快时光过得飞快，牌技不精的我居然还胡了一局，但是具体的规则细节全靠他给我指点。临别之时，他家人邀请我今晚留宿，他们是出于好意，但我再怎么想留下也不能第一面就住在别人。:(我想着下次有机会再来拜访。多日以来一面，他仍旧安好，我已满足。</p>
<h2 id="十八"><a href="#十八" class="headerlink" title="十八"></a>十八<br/></h2><p>他，仍是繁忙。</p>
<h2 id="十九"><a href="#十九" class="headerlink" title="十九"></a>十九<br/></h2><p>记得之前我们说好的，晚上去健身房锻炼身体，但现在看来，只怪我想得太过简单了。工作后，他时不时会有额外的事情要处理，总会有不确定的事情发生，这使得我们的见面愈加不易。</p>
<h2 id="二十"><a href="#二十" class="headerlink" title="二十"></a>二十<br/></h2><p>这天我们聊的是最少的一天，日常的问候，聊天内容也变得寡淡。</p>
<h2 id="二十一"><a href="#二十一" class="headerlink" title="二十一"></a>二十一<br/></h2><p>七点半我便先道的早，按理说他应该起床就能看到了，只是都到达单位上班了很久我才收到他的回复。面对这个情况，我总是会胡思乱想，唉。这天，我们都有些忙碌。</p>
<h2 id="二十二"><a href="#二十二" class="headerlink" title="二十二"></a>二十二<br/></h2><p>今天我本想叫他出来走走，结果被告知他们家老人身体抱恙，只得作罢。愿他的家人身体安康，早日康复。</p>
<h2 id="二十三"><a href="#二十三" class="headerlink" title="二十三"></a>二十三<br/></h2><p>留白。</p>
<h2 id="二十四"><a href="#二十四" class="headerlink" title="二十四"></a>二十四<br/></h2><p>留白。</p>
<h2 id="二十五"><a href="#二十五" class="headerlink" title="二十五"></a>二十五<br/></h2><p>每每与他聊天时，总会在发了些许问题后，许久得不到他的回答。而在之后，他说的话有时却与我的问题毫不相干了。对此，我总是感到有些烦心与费解。</p>
<h2 id="二十六"><a href="#二十六" class="headerlink" title="二十六"></a>二十六<br/></h2><p>是不是快到时候了，离做出选择的时候。</p>
<h2 id="二十七"><a href="#二十七" class="headerlink" title="二十七"></a>二十七<br/></h2><p>难得放假休息的一天，他上午带着二姐来询问事情。许久不见，依是那番，温润而帅气。他哄小孩子玩闹的样子同样煞是可爱。</p>
<h2 id="二十八"><a href="#二十八" class="headerlink" title="二十八"></a>二十八<br/></h2><p>月末，彷佛意味着一件事情，一个目标的结束，但也是新的开始之际。这个故事，快要驶向了终点吧。只道是，造化弄人，我与他的缘分不逢时。祝愿我们的未来，有长路漫漫，亦有良人相伴。风流倜傥，伟岸昂扬。</p>
<h1 id="三月"><a href="#三月" class="headerlink" title="三月"></a>三月</h1><h2 id="一"><a href="#一" class="headerlink" title="一"></a>一<br/></h2><p>无论我准备何种措辞，他一句话总能打破我费力构建的心防。明明他几乎每天都能与他处了五年的对象在一起打游戏，他也有属于他自己的小圈子。我这一个月来始终徘徊，甚至夜晚辗转反侧，明明已是错过，为何还要相遇。既然他每天还能与对象打游戏，那我之前这些行为有何意义，幼稚而单纯地索求，却又自我感动着。当我夜晚构思组织言语，总忍不住想着，他明明是有对象的陪伴，而距离绝对不会成为两人分开的借口，此时此刻的我到底要扮演什么角色。总觉得他的这些温柔，是以我们明明不会在一起的结果为由，于我倾心付出而不得的施舍。自从得知了他那相伴五年之久的对象，我便总是用一个事实欺骗自己。在这份感情里他心里一直有着他爱的人，不会是我，但我心里却只有他了。好消息是，不久我便要去上自习了。而我相信，时间会冲淡一切，同时愿意去承认这份感情的终点已然在不远处了。</p>
<h2 id="二"><a href="#二" class="headerlink" title="二"></a>二<br/></h2><p><font color="#d25858">也许终点是在那里，但是这一路的风景他曾与我分享，畅谈过他渴望到达的远方————西藏、云南，回忆起这种种，作为他的听众，我始终感到幸运。</font>还记得，他曾说过：”有机会把你介绍给我对象，他也是个可温柔的人。”我把这句话当真，并且等待那一天的到来，期盼着是何种情境，更好奇他是个什么样的人，又渴望着得到他那般上天眷顾的幸运。</p>
<h2 id="三"><a href="#三" class="headerlink" title="三"></a>三<br/></h2><p>我花费了一个上午去办理了联通手机业务，下午安装了宽带。到晚上，他吃过饭后提到，没事能来找我玩玩。我珍惜每次相遇，他之邀请更甚。再一次相见，于兰州拉面。他把电动车停在门口，我们便走路前往步行街。和煦的夜风，稀疏的行人，在这小小的县城里，我对这股氛围感到十分惬意。尽管认识了刚好一个月，我们彼此熟悉了许多，但二人结伴而行时，仍会有初遇那般的小尴尬与不知所措，而这已不是心防高墙。我们买了几个串串和一袋草莓在这无人叨扰的夜色里漫步。时不时见上一面，聊会生活，谈谈梦想，虽然已经褪去了学生的青涩，但是我们这样的相处或许是目前最适宜的了。不用力过猛，只是细水长流。</p>
<h2 id="四-1"><a href="#四-1" class="headerlink" title="四"></a><font color="#d25858">四</font></h2><p>得知他这周要加班，没了一天假期，我内心有些许失落。尽管我知道他正常休假也应该是要好好休息，但我仍抱着能够见面的期待。另外，上面还安排他们几人接下来两天都要到旧址搬运档案，这可是个体力活，只因他们男性员工比例较少，无奈只得降任于他。<font color="#d25858">也许是白天有些忙碌，他晚上很快便入睡了，这也是我第一次没有收到他到道别的表情包。</font>明明今天二月初二，是个很好的日子，适宜做出新的计划，新的改变，我们这样结束一天，是有些遗憾了。</p>
<h2 id="五-1"><a href="#五-1" class="headerlink" title="五"></a>五</h2><p>他开始了一整天的搬运工作，而我坐在自习室里复习。学习过程中，我才能慢慢的把自己的注意力从他身上暂时抽离出来，专心于自己的成长，也是给自己空间去审视这一个月来的“混乱情感”。</p>
<h2 id="六-1"><a href="#六-1" class="headerlink" title="六"></a>六</h2><p>他又要当一天的“搬砖工人”，昨晚身体已有些酸痛，今日却仍需劳累一天。他上下午来回不停，搬运剩下的档案，而我只是心有余却帮不上什么。本来估计下午3:30就能提早下班回家歇息，结果这一干便又到了5点多。他说：“晚上去洗澡吧。”:-)这句话瞬间帮我赶走了学习的倦意，我打起了精神询问着见面时间。我感觉距离上一次共浴已经过了很久，因此每次都期待着与他再次坦诚相见。八点我们如约而至，再次来到了他家对面这个熟悉的澡堂子，天气暖和起来，之后应该便不会来到这里了。泡洗搓一条龙下来花了一个多小时，他只是站在那里就总能让我产生欲望，我不想用下半身思考，但胜景在侧，事实如此。来回送我回去的路上，我任性地于后座环抱着他，感受着他身体的热量与散发的气息，恨不得拼劲全力去铭记这份温暖，定格时间。临睡前，我总是频频回忆，妄图加固印象，彷佛便能拥他而眠。爱而不得莫叹息，缘分如此是天意。</p>
<h2 id="七-1"><a href="#七-1" class="headerlink" title="七"></a>七</h2><p>今年五六月份他打算做个激光近视手术。我实话说道，他丝毫不必担心眼镜对颜值的影响，每天得戴着眼镜的麻烦是无可厚非，于他却是锦上添花，既然亦有此意，那便去做吧。看到他在得无app里收藏了许多鞋子，基本上都是一千起步，而他刚刚买了一款三百左右的，给我发来照片，是白灰色，有多个蓝色条纹相交，设计感是蛮不错的。我却一不小心直接开门见山，询问他的脚码与心仪的款式链接，傻子都能看穿我的想法。事后，我着实十分后悔当时的冲动，明明应该是出其不意的惊喜礼物，现在倒好，弄巧成拙了。想到之后某一天他接下鞋子那一刻露出的欣喜，为了让那天能早日到来，我一定要拼尽全力去实现。<font color="#d25858">他收获快乐便足以使我感到幸福。</font></p>
<h2 id="八-1"><a href="#八-1" class="headerlink" title="八"></a>八</h2><p>不知为何，有时在给他发过消息后，他会选择性忽略其中的一些询问，或许是我废话太多打搅到他了。我不想胡乱揣测他的想法，只是就事论事，理性分析。等待许久之后再次询问，却得知他已有困意，只得作罢。</p>
<h2 id="九-1"><a href="#九-1" class="headerlink" title="九"></a>九</h2><h2 id="十（终章）"><a href="#十（终章）" class="headerlink" title="十（终章）"></a>十（终章）</h2><p>正如每个故事都有结局，33天前我们成为了好友，缘分就此展开。回看我曾经写下的那段话，<font color="#d25858">“这是我们相识几天之后，我想开始记录的日子，而我对这份感情的走向却丝毫不知何种结果。”</font>或许，这段感情天早已注定。</p>
<h2 id="十一-1"><a href="#十一-1" class="headerlink" title="十一"></a>十一</h2><p>微笑着说出了再见。真的再见，这一个月来的快乐。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>故事</tag>
      </tags>
  </entry>
  <entry>
    <title>Evanstan分析汇总</title>
    <url>/2021/04/07/Evanstan%E5%88%86%E6%9E%90%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<p>前言，最近沉迷同人圈子的过程中，无意间刷到了桃包（即漫威里的盾冬天RPS），前几年看的时候丝毫没有注意到这对CP的线，而这两天沉迷其中无法自拔，甚至可能磕到真的了。经过这些天，我在lofter，wb等多个平台，同时到处搜寻资料，甚至有幸拿到一份太太的星盘分析，就想着记录一下这个故事。尽管美队已经不再参演，冬兵也有了自己的衍生剧，但是这些看到的合集与各位太太的分析，我愿意相信真相是真。借由一个弹幕说的，如果CE与SS是真那么我们这几年的青春便是奉上的最无悔的礼物。我愿意相信，野梦成真，好梦不醒，也希望每一个人都能找到自己的幸福。</p>
<hr>
<p>让我们就先从一位太太的星盘分析开始，慢慢整理出这两位的故事，从相识到现在吧。</p>
<h1 id="星盘分析"><a href="#星盘分析" class="headerlink" title="星盘分析"></a>星盘分析</h1><h2 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h2>]]></content>
      <categories>
        <category>RPS</category>
      </categories>
      <tags>
        <tag>Evanstan</tag>
        <tag>同人</tag>
        <tag>RPS</tag>
      </tags>
  </entry>
  <entry>
    <title>Merlin分析</title>
    <url>/2021/03/26/Merlin%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p>前言：曾想第一次看到《Merlin》这部剧集是我在大一那段懵懂无忧的一年里，当时只是为了满足对西方女巫、魔法元素的幻想。如今已是大四邻近毕业之时，考研失利自甘沉沦的我又再次欣赏了这部剧，然而，带给我的确实无尽的感伤。除却中世纪欧洲亚瑟王，圆桌骑士的传说外，导演与编剧给我们在这儿童剧的外表下呈现的是一段千年的爱情悲剧，而我们的故事主角：Merlin &amp; Arthur.<br>PS </p>
<span id="more"></span>
<hr>
<h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
      <categories>
        <category>AM</category>
      </categories>
      <tags>
        <tag>AM</tag>
        <tag>thoughts</tag>
      </tags>
  </entry>
  <entry>
    <title>VimCheatSheet</title>
    <url>/2023/01/09/VimCheatSheet/</url>
    <content><![CDATA[<p>前</p>
]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo next 添加 Aplayer</title>
    <url>/2021/03/27/hexo-next-%E6%B7%BB%E5%8A%A0-Aplayer/</url>
    <content><![CDATA[<p>前言：本文转自<a href="https://blog.csdn.net/qq_35324057/article/details/104124723">《Hexo next 主题中添加播放器 Aplayer》</a></p>
<hr>
<h1 id="下载-Aplayer-源码"><a href="#下载-Aplayer-源码" class="headerlink" title="下载 Aplayer 源码"></a>下载 Aplayer 源码</h1><p>请点击： <a href="https://github.com/DIYgod/APlayer">Aplayer</a></p>
<h1 id="复制-dist-文件夹"><a href="#复制-dist-文件夹" class="headerlink" title="复制 dist 文件夹"></a>复制 dist 文件夹</h1><p>将解压后的文件夹中的 dist 文件夹复制到你的创建博客路径下： blog/themes/next/source</p>
<span id="more"></span>

<h1 id="新建-music-js"><a href="#新建-music-js" class="headerlink" title="新建 music.js"></a>新建 music.js</h1><p>在路径： blog/themes/next/source/dist 下添加 music.js 文件并粘贴以下内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const ap = new APlayer(&#123;</span><br><span class="line">    container: document.getElementById(&#x27;aplayer&#x27;),</span><br><span class="line">    fixed: true,</span><br><span class="line">    autoplay: true,</span><br><span class="line">    audio: [</span><br><span class="line">	  &#123;</span><br><span class="line">        name: &#x27;勇气&#x27;,</span><br><span class="line">        artist: &#x27;棉子&#x27;,</span><br><span class="line">        url: &#x27;http://music.163.com/song/media/outer/url?id=1411358329.mp3&#x27;,</span><br><span class="line">        cover: &#x27;/images/5.jpg&#x27;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        name: &quot;星星&quot;,</span><br><span class="line">        artist: &#x27;张杰&#x27;,</span><br><span class="line">        url: &#x27;http://music.163.com/song/media/outer/url?id=1399004693.mp3&#x27;,</span><br><span class="line">        cover: &#x27;/images/xingxing.jpg&#x27;,</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="修改文件-layout-swig"><a href="#修改文件-layout-swig" class="headerlink" title="修改文件 _layout.swig"></a>修改文件 _layout.swig</h1><p>在路径： blog/themes/next/layout 下找到 _layout.swig 文件，将下面代码粘贴到 <body itemscope>在body里面即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;/dist/APlayer.min.css&quot;&gt;</span><br><span class="line">&lt;div id=&quot;aplayer&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;/dist/APlayer.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;/dist/music.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="利用-Pjax-实现全局音乐播放"><a href="#利用-Pjax-实现全局音乐播放" class="headerlink" title="利用 Pjax 实现全局音乐播放"></a>利用 Pjax 实现全局音乐播放</h1><ol>
<li>打开路径 themes/next/layout 下找到 _layout.swig</li>
<li>在 </head> 标签前面添加如下代码<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> &lt;head&gt;   //粘贴到这里</span><br><span class="line">    </span><br><span class="line">  &lt;!--pjax：防止跳转页面音乐暂停--&gt;</span><br><span class="line">  &lt;script src=&quot;https://cdn.jsdelivr.net/npm/pjax@0.2.8/pjax.js&quot;&gt;&lt;/script&gt; </span><br><span class="line">&lt;/head&gt; </span><br></pre></td></tr></table></figure></li>
<li>在主题配置文件中找到 pjax，将其值设置为 true<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Easily enable fast Ajax navigation on your website.</span><br><span class="line"># Dependencies: https://github.com/theme-next/theme-next-pjax</span><br><span class="line">pjax: true</span><br></pre></td></tr></table></figure></li>
</ol>
<p>至此，大功告成!!!</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
        <tag>Aplayer</tag>
      </tags>
  </entry>
  <entry>
    <title>Python编程从入门到实践</title>
    <url>/2021/03/26/Python%E7%BC%96%E7%A8%8B%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<p>前言，该博客记录了我从2021.4.3，自颓废10周之久后,打算开始完成毕业设计的过程。想到什么就补充什么吧。首先便是真正开始学习Python之路。</p>
<h1 id="2-变量和简单数据类型"><a href="#2-变量和简单数据类型" class="headerlink" title="2. 变量和简单数据类型"></a>2. 变量和简单数据类型</h1><h2 id="2-1-运行-hello-Python-py-时发生的情况"><a href="#2-1-运行-hello-Python-py-时发生的情况" class="headerlink" title="2.1 运行 hello_Python.py 时发生的情况"></a>2.1 运行 hello_Python.py 时发生的情况</h2><p>编辑器会使用Python解释器运行.py文件</p>
<span id="more"></span>
<h3 id="2-3-1-使用方法修改字符串的大小写"><a href="#2-3-1-使用方法修改字符串的大小写" class="headerlink" title="2.3.1 使用方法修改字符串的大小写"></a>2.3.1 使用方法修改字符串的大小写</h3><p>.title() 以首字母大写的方式显示每个单词， .upper()， .lower() 将字符串改为全部大写或全部小写</p>
<h3 id="2-3-2-合并字符串"><a href="#2-3-2-合并字符串" class="headerlink" title="2.3.2 合并字符串"></a>2.3.2 合并字符串</h3><p>Python使用 “+” 完成拼接字符串</p>
<h3 id="2-3-4-删除空白"><a href="#2-3-4-删除空白" class="headerlink" title="2.3.4 删除空白"></a>2.3.4 删除空白</h3><p>Python能够找出字符串开头和末尾多余的空白。要确保字符串末尾没有空白，可使用方法 .rstrip()， 可以删除字符串开头的空白，或者剔除字符串两端的空白，分别使用 .lstrip() 和 .strip()</p>
<h3 id="2-4-3-使用函数-str-避免类型错误"><a href="#2-4-3-使用函数-str-避免类型错误" class="headerlink" title="2.4.3 使用函数 str()避免类型错误"></a>2.4.3 使用函数 str()避免类型错误</h3><p>函数 str() 可以让Python将非字符串值表示为字符串</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">age = <span class="number">23</span></span><br><span class="line">message = <span class="string">&quot;Happy &quot;</span> + <span class="built_in">str</span>(age) + <span class="string">&quot;rd Birthday!&quot;</span></span><br><span class="line"><span class="built_in">print</span>(message)</span><br></pre></td></tr></table></figure>

<h3 id="2-5-1-编写注释"><a href="#2-5-1-编写注释" class="headerlink" title="2.5.1 编写注释"></a>2.5.1 编写注释</h3><p>注释用 # 标识</p>
<h1 id="3-列表简介"><a href="#3-列表简介" class="headerlink" title="3. 列表简介"></a>3. 列表简介</h1><h2 id="3-1-列表是什么"><a href="#3-1-列表是什么" class="headerlink" title="3.1 列表是什么"></a>3.1 列表是什么</h2><p>列表由一系列按特定顺序排列的元素组成</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">bicycles = [<span class="string">&#x27;trek&#x27;</span>, <span class="string">&#x27;redline&#x27;</span>, <span class="string">&#x27;cannondale&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(bicycles)</span><br></pre></td></tr></table></figure>

<h3 id="3-1-1-访问列表元素"><a href="#3-1-1-访问列表元素" class="headerlink" title="3.1.1 访问列表元素"></a>3.1.1 访问列表元素</h3><p>从列表bicycles中提取第一款自行车</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">bicycles = [<span class="string">&#x27;trek&#x27;</span>, <span class="string">&#x27;redline&#x27;</span>, <span class="string">&#x27;cannondale&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(bicycles[<span class="number">0</span>])</span><br></pre></td></tr></table></figure>

<h2 id="3-2-修改、添加和删除元素"><a href="#3-2-修改、添加和删除元素" class="headerlink" title="3.2 修改、添加和删除元素"></a>3.2 修改、添加和删除元素</h2><h3 id="3-2-1-修改列表元素"><a href="#3-2-1-修改列表元素" class="headerlink" title="3.2.1 修改列表元素"></a>3.2.1 修改列表元素</h3><p>假设一个摩托车列表，修改其中第一个元素 ‘honda’</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">motorcycles = [<span class="string">&#x27;honda&#x27;</span>, <span class="string">&#x27;yamaha&#x27;</span>, <span class="string">&#x27;suzuki&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(motorcycles)</span><br><span class="line"></span><br><span class="line">motorcycles[<span class="number">0</span>] = <span class="string">&#x27;ducati&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(motorcycles)</span><br></pre></td></tr></table></figure>

<h3 id="3-2-2-在列表中添加元素"><a href="#3-2-2-在列表中添加元素" class="headerlink" title="3.2.2 在列表中添加元素"></a>3.2.2 在列表中添加元素</h3><p>1.列表末尾添加元素<br>方法 .append()让动态地创建列表更加简单</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">motorcycles = [<span class="string">&#x27;honda&#x27;</span>, <span class="string">&#x27;yamaha&#x27;</span>, <span class="string">&#x27;suzuki&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(motorcycles)</span><br><span class="line"></span><br><span class="line">motorcycles.append(<span class="string">&#x27;ducati&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(motorcycles)</span><br></pre></td></tr></table></figure>

<p>2.在列表中插入元素<br>使用方法 .insert()可以在列表的任意位置添加新元素，但是为此需要新元素的索引和值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">motorcycles = [<span class="string">&#x27;honda&#x27;</span>, <span class="string">&#x27;yamaha&#x27;</span>, <span class="string">&#x27;suzuki&#x27;</span>]</span><br><span class="line"></span><br><span class="line">motorcycles.insert(<span class="number">0</span>, <span class="string">&#x27;ducati&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(motorcycles)</span><br></pre></td></tr></table></figure>

<p>结果是，值 ‘ducati’ 被插入到了列表开头，这种操作将列表中的既有的每个元素都右移一个位置</p>
<h3 id="3-2-3-从列表中删除元素"><a href="#3-2-3-从列表中删除元素" class="headerlink" title="3.2.3 从列表中删除元素"></a>3.2.3 从列表中删除元素</h3><p>1.使用 del 语句删除元素<br>del 可以删除任何位置处的列表元素，条件是知道其索引</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">motorcycles = [<span class="string">&#x27;honda&#x27;</span>, <span class="string">&#x27;yamaha&#x27;</span>, <span class="string">&#x27;suzuki&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> motorcycles[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(motorcycles)</span><br></pre></td></tr></table></figure>

<p>2.使用方法 pop() 删除元素<br>方法pop()可删除列表末尾的元素，并能够接着使用它（类似栈中弹出栈顶元素）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">motorcycles = [<span class="string">&#x27;honda&#x27;</span>, <span class="string">&#x27;yamaha&#x27;</span>, <span class="string">&#x27;suzuki&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(motorcycles)</span><br><span class="line"></span><br><span class="line">popped_motorcycle = motorcycles.pop()</span><br><span class="line"><span class="built_in">print</span>(motorcycles)</span><br><span class="line"><span class="built_in">print</span>(popped_motorcycle)</span><br></pre></td></tr></table></figure>

<p>3.弹出列表中任何位置处的元素<br>实际上， pop()可以来删除列表中的任何位置的元素，只需在括号中指定要删除的元素的索引即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">motorcycles = [<span class="string">&#x27;honda&#x27;</span>, <span class="string">&#x27;yamaha&#x27;</span>, <span class="string">&#x27;suzuki&#x27;</span>]</span><br><span class="line"></span><br><span class="line">first_owned = motorcycles.pop(<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(motorcycles)</span><br></pre></td></tr></table></figure>

<p>结果是，我们弹出了列表中的第一款摩托车，当使用 pop() 时，被弹出的元素就不在列表中了</p>
<p>4.根据值删除元素<br>只知道要删除的元素的值时，可以使用方法 remove()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">motorcycles = [<span class="string">&#x27;honda&#x27;</span>, <span class="string">&#x27;yamaha&#x27;</span>, <span class="string">&#x27;suzuki&#x27;</span>, <span class="string">&#x27;ducati&#x27;</span>]</span><br><span class="line"></span><br><span class="line">motorcycles.remove(<span class="string">&#x27;ducati&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(motorcycles)</span><br></pre></td></tr></table></figure>

<p>使用 remove() 从列表中删除元素的值时，也可以接着使用它的值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">motorcycles = [<span class="string">&#x27;honda&#x27;</span>, <span class="string">&#x27;yamaha&#x27;</span>, <span class="string">&#x27;suzuki&#x27;</span>, <span class="string">&#x27;ducati&#x27;</span>]</span><br><span class="line"></span><br><span class="line">too_expensive = <span class="string">&#x27;ducati&#x27;</span></span><br><span class="line">motorcycles.remove(too_expensive)</span><br><span class="line"><span class="built_in">print</span>(motorcycles)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nA &quot;</span> + too_expensive.title() + <span class="string">&quot; is too expensive for me.&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="3-3-组织列表"><a href="#3-3-组织列表" class="headerlink" title="3.3 组织列表"></a>3.3 组织列表</h2><h3 id="3-3-1-使用方法-sort-对列表进行永久性排序"><a href="#3-3-1-使用方法-sort-对列表进行永久性排序" class="headerlink" title="3.3.1 使用方法 sort() 对列表进行永久性排序"></a>3.3.1 使用方法 sort() 对列表进行永久性排序</h3><p>Python方法 sort() 能够较为轻松的对列表进行排序。假设一个汽车列表，令其所有值都是小写的，按照字母顺序排列</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cars = [<span class="string">&#x27;bmw&#x27;</span>, <span class="string">&#x27;audi&#x27;</span>, <span class="string">&#x27;toyota&#x27;</span>, <span class="string">&#x27;subaru&#x27;</span>]</span><br><span class="line">cars.sort()</span><br><span class="line"><span class="built_in">print</span>(cars)</span><br></pre></td></tr></table></figure>

<p>结果是，方法 sort() 永久性地修改了列表元素的排列顺序。同时，也可以按与字母顺序相反的顺序排列列表元素，为此，只需向 sort() 方法中传递参数 reverse=True 即可</p>
<h3 id="3-3-2-使用函数-sorted-列表进行临时排序"><a href="#3-3-2-使用函数-sorted-列表进行临时排序" class="headerlink" title="3.3.2 使用函数 sorted() 列表进行临时排序"></a>3.3.2 使用函数 sorted() 列表进行临时排序</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cars = [<span class="string">&#x27;bmw&#x27;</span>, <span class="string">&#x27;audi&#x27;</span>, <span class="string">&#x27;toyota&#x27;</span>, <span class="string">&#x27;subaru&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(cars)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(cars))</span><br><span class="line"><span class="built_in">print</span>(cars)</span><br></pre></td></tr></table></figure>

<h3 id="3-3-3-倒着打印列表"><a href="#3-3-3-倒着打印列表" class="headerlink" title="3.3.3 倒着打印列表"></a>3.3.3 倒着打印列表</h3><p>要反转列表元素的排列顺序，可使用方法 reverse()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cars = [<span class="string">&#x27;bmw&#x27;</span>, <span class="string">&#x27;audi&#x27;</span>, <span class="string">&#x27;toyota&#x27;</span>, <span class="string">&#x27;subaru&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(cars)</span><br><span class="line"></span><br><span class="line">cars.reverse()</span><br><span class="line"><span class="built_in">print</span>(cars)</span><br></pre></td></tr></table></figure>

<p>注意， reverse() 不是指按与字母顺序相反的顺序排列列表元素，而是反转列表的排列顺序</p>
<h3 id="3-3-4-确定列表的长度"><a href="#3-3-4-确定列表的长度" class="headerlink" title="3.3.4 确定列表的长度"></a>3.3.4 确定列表的长度</h3><p>使用函数 len() 可以快速获悉列表的长度</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cars = [<span class="string">&#x27;bmw&#x27;</span>, <span class="string">&#x27;audi&#x27;</span>, <span class="string">&#x27;toyota&#x27;</span>, <span class="string">&#x27;subaru&#x27;</span>]</span><br><span class="line"><span class="built_in">len</span>(cars)</span><br></pre></td></tr></table></figure>

<h1 id="4-操作列表"><a href="#4-操作列表" class="headerlink" title="4. 操作列表"></a>4. 操作列表</h1><h2 id="4-1-遍历整个列表"><a href="#4-1-遍历整个列表" class="headerlink" title="4.1 遍历整个列表"></a>4.1 遍历整个列表</h2><p>使用for循环</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">magicians = [<span class="string">&#x27;alice&#x27;</span>, <span class="string">&#x27;david&#x27;</span>, <span class="string">&#x27;carolina&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> magician <span class="keyword">in</span> magicians:</span><br><span class="line">    <span class="built_in">print</span>(magician)</span><br></pre></td></tr></table></figure>

<h2 id="4-3-创建数字列表"><a href="#4-3-创建数字列表" class="headerlink" title="4.3 创建数字列表"></a>4.3 创建数字列表</h2><p>函数range()可以生成一系列数字</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>)</span><br><span class="line">    <span class="built_in">print</span>(value)</span><br></pre></td></tr></table></figure>

<p>结果是，打印出了数字1-4</p>
<h3 id="4-3-2-使用range-创建数字列表"><a href="#4-3-2-使用range-创建数字列表" class="headerlink" title="4.3.2 使用range()创建数字列表"></a>4.3.2 使用range()创建数字列表</h3><p>1.创建数字列表，可以使用函数list()将range()的结果直接转换为列表。如果将range()作为list()的参数，输出将为一个数字列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">numbers = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>))</span><br><span class="line"><span class="built_in">print</span>(numbers)</span><br></pre></td></tr></table></figure>

<p>结果是，</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure>

<p>2.使用函数range()还可以指定步长。如下打印1-10间的偶数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">even_number = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">2</span>,<span class="number">11</span>,<span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(even_number)</span><br></pre></td></tr></table></figure>

<h3 id="4-3-4-列表解析"><a href="#4-3-4-列表解析" class="headerlink" title="4.3.4 列表解析"></a>4.3.4 列表解析</h3><p>列表解析将for循环和创建新元素的代码合并成一行，并自动附加新元素。如下，创建平方数列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">squares = [value**<span class="number">2</span> <span class="keyword">for</span> value <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">squares = []</span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>)</span><br><span class="line">    square = value**<span class="number">2</span></span><br><span class="line">    squares.append(square)</span><br><span class="line"><span class="built_in">print</span>(squares)</span><br></pre></td></tr></table></figure>

<p>要使用列表解析，首先制定一个<em>描述性</em>的<em>列表名</em>，如squares；然后，制定一个左方括号，并定义一个表达式，用于生成要存储到列表中的值。在该实例中，表达式为value **2。接下来，编写一个for循环，用于给表达式提供值，再加上右方括号。在该实例中，for循环为for value in range(1,11)，它将值1-10提供给表达式value **2。</p>
<h2 id="4-4-使用列表的一部分"><a href="#4-4-使用列表的一部分" class="headerlink" title="4.4 使用列表的一部分"></a>4.4 使用列表的一部分</h2><h3 id="4-4-1-切片"><a href="#4-4-1-切片" class="headerlink" title="4.4.1 切片"></a>4.4.1 切片</h3><p>要创建切片，可指定要使用的第一个元素的索引和最后一个元素的索引加1.如下，创建切片</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">players = [<span class="string">&#x27;charles&#x27;</span>, <span class="string">&#x27;martina&#x27;</span>, <span class="string">&#x27;michael&#x27;</span>, <span class="string">&#x27;florence&#x27;</span>, <span class="string">&#x27;eli&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(players[<span class="number">0</span>:<span class="number">3</span>]) <span class="comment">#  打印包含前三位运动员</span></span><br><span class="line"><span class="built_in">print</span>(players[:<span class="number">4</span>]) <span class="comment">#  从表头开始至表尾</span></span><br><span class="line"><span class="built_in">print</span>(players[<span class="number">2</span>:]) <span class="comment">#  从第三个元素到表尾</span></span><br><span class="line"><span class="built_in">print</span>(players[-<span class="number">3</span>:]) <span class="comment">#  输出名单最后三位</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="4-4-2-遍历切片"><a href="#4-4-2-遍历切片" class="headerlink" title="4.4.2 遍历切片"></a>4.4.2 遍历切片</h3><p>若要遍历列表的部分元素，可以在for循环中使用切片</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">players = [<span class="string">&#x27;charles&#x27;</span>, <span class="string">&#x27;martina&#x27;</span>, <span class="string">&#x27;michael&#x27;</span>, <span class="string">&#x27;florence&#x27;</span>, <span class="string">&#x27;eli&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> player <span class="keyword">in</span> players[:<span class="number">3</span>]:</span><br><span class="line">    <span class="built_in">print</span>(players.title())</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="4-4-3-复制列表"><a href="#4-4-3-复制列表" class="headerlink" title="4.4.3 复制列表"></a>4.4.3 复制列表</h3><p>要复制列表，可<em>创建一个包含整个列表的切片</em>。简单地将变量赋给变量是没有用的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_foods = [<span class="string">&#x27;pizza&#x27;</span>, <span class="string">&#x27;falafel&#x27;</span>, <span class="string">&#x27;carrot cake&#x27;</span>]</span><br><span class="line">friend_foods = my_foods[:] <span class="comment">#  可行</span></span><br><span class="line"><span class="comment">#  friedn_foods = my_foods 赋值无用</span></span><br><span class="line"></span><br><span class="line">my_foods.append(<span class="string">&#x27;canoli&#x27;</span>)</span><br><span class="line">friend_foods.append(<span class="string">&#x27;ice cream&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="4-5-元组"><a href="#4-5-元组" class="headerlink" title="4.5 元组"></a>4.5 元组</h2><p>列表用于存储在程序运行期间可能变化的数据集，即可修改的。Python称不能修改的值为不可变的，而不可变的列表成为元组。</p>
<h3 id="4-5-1-定义元组"><a href="#4-5-1-定义元组" class="headerlink" title="4.5.1 定义元组"></a>4.5.1 定义元组</h3><p>使用圆括号，类似列表。如下，</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dimensions = (<span class="number">200</span>, <span class="number">50</span>)</span><br><span class="line"><span class="built_in">print</span>(dimension[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(dimension[<span class="number">1</span>])</span><br></pre></td></tr></table></figure>

<h3 id="4-5-2-遍历元组中的所有值"><a href="#4-5-2-遍历元组中的所有值" class="headerlink" title="4.5.2 遍历元组中的所有值"></a>4.5.2 遍历元组中的所有值</h3><p>与列表一样，使用for循环遍历元组</p>
<h3 id="4-5-3-修改元组变量"><a href="#4-5-3-修改元组变量" class="headerlink" title="4.5.3 修改元组变量"></a>4.5.3 修改元组变量</h3><p>尽管不能修改元组的元素，但是可以给存储元组的变量<em>赋值</em>，如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dimensions = (<span class="number">200</span>, <span class="number">50</span>)</span><br><span class="line"><span class="built_in">print</span>(dimensions)</span><br><span class="line">dimensions = (<span class="number">400</span>, <span class="number">100</span>)</span><br><span class="line"><span class="built_in">print</span>(dimensions)</span><br></pre></td></tr></table></figure>

<h1 id="5-if语句"><a href="#5-if语句" class="headerlink" title="5. if语句"></a>5. if语句</h1><h2 id="5-2-条件测试"><a href="#5-2-条件测试" class="headerlink" title="5.2 条件测试"></a>5.2 条件测试</h2><h3 id="5-2-5-检查多个条件"><a href="#5-2-5-检查多个条件" class="headerlink" title="5.2.5 检查多个条件"></a>5.2.5 检查多个条件</h3><p>1.使用and检查多个条件</p>
<p>2.使用or检查多个条件</p>
<h3 id="5-2-6-检查特定值是否包含在列表中"><a href="#5-2-6-检查特定值是否包含在列表中" class="headerlink" title="5.2.6 检查特定值是否包含在列表中"></a>5.2.6 检查特定值是否包含在列表中</h3><p>判断特定的值是否已包含在列表中，可使用关键字in，如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; requested_toppings = [<span class="string">&#x27;mushroom&#x27;</span>, <span class="string">&#x27;onions&#x27;</span>, <span class="string">&#x27;pineapple&#x27;</span>]</span><br><span class="line">&gt;&gt;&gt; <span class="string">&#x27;mushroom&#x27;</span> <span class="keyword">in</span> requested_toppings</span><br><span class="line">True</span><br></pre></td></tr></table></figure>

<h2 id="5-3-if-语句"><a href="#5-3-if-语句" class="headerlink" title="5.3 if 语句"></a>5.3 if 语句</h2><h3 id="5-3-1-简单的-if-语句"><a href="#5-3-1-简单的-if-语句" class="headerlink" title="5.3.1 简单的 if 语句"></a>5.3.1 简单的 if 语句</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> conditional_test:</span><br><span class="line">    do something</span><br></pre></td></tr></table></figure>

<h3 id="5-3-2-if-else-语句"><a href="#5-3-2-if-else-语句" class="headerlink" title="5.3.2 if-else 语句"></a>5.3.2 if-else 语句</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> conditional_test:</span><br><span class="line">    do something</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    do something</span><br></pre></td></tr></table></figure>

<h3 id="5-3-3-if-elif-else-结构"><a href="#5-3-3-if-elif-else-结构" class="headerlink" title="5.3.3 if-elif-else 结构"></a>5.3.3 if-elif-else 结构</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> conditional_test:</span><br><span class="line">    do something</span><br><span class="line"><span class="keyword">elif</span>:</span><br><span class="line">    do something</span><br><span class="line"><span class="keyword">else</span>: </span><br><span class="line">    do something</span><br></pre></td></tr></table></figure>

<h3 id="5-4-2-确认列表不是空的"><a href="#5-4-2-确认列表不是空的" class="headerlink" title="5.4.2 确认列表不是空的"></a>5.4.2 确认列表不是空的</h3><p>在运行for循环前确定列表是否为空很重要</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">requested_toppings = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> requested_topping:</span><br><span class="line">    <span class="keyword">for</span> requested_topping <span class="keyword">in</span> requested_toppings:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Adding &quot;</span> + requested_topping + <span class="string">&quot;.&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nFinished making your pizza!&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Are you sure you want a plain pizza?&quot;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="6-字典"><a href="#6-字典" class="headerlink" title="6. 字典"></a>6. 字典</h1><h2 id="6-1-一个简单的字典"><a href="#6-1-一个简单的字典" class="headerlink" title="6.1 一个简单的字典"></a>6.1 一个简单的字典</h2><p>alien.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">alien_0 = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;points&#x27;</span>: <span class="number">5</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(alien_0[<span class="string">&#x27;color&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(alien_0[<span class="string">&#x27;points&#x27;</span>])</span><br></pre></td></tr></table></figure>

<h2 id="6-2-使用字典"><a href="#6-2-使用字典" class="headerlink" title="6.2 使用字典"></a>6.2 使用字典</h2><p>在python中，字典是一系列<em>键-值</em>对，每个键都与一个值关联，可以使用键来访问与之相关联的值。事实上，可以将<strong>任何Python对象作为字典中的值</strong>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">alien_0 = [<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>]</span><br></pre></td></tr></table></figure>

<h3 id="6-2-1-访问字典中的值"><a href="#6-2-1-访问字典中的值" class="headerlink" title="6.2.1 访问字典中的值"></a>6.2.1 访问字典中的值</h3><p>要获取与键相关联的值，可依次指定字典名和放在方括号内的键</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">alien_0 = [<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(alien_0[<span class="string">&#x27;color&#x27;</span>])</span><br></pre></td></tr></table></figure>

<h3 id="6-2-2-添加键值对"><a href="#6-2-2-添加键值对" class="headerlink" title="6.2.2 添加键值对"></a>6.2.2 添加键值对</h3><p>字典是一种动态结构，要添加键值对，可依次指定字典名、用方括号起的的键和相关联的值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">alien_0 = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;points&#x27;</span>: <span class="number">5</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(alien_0)</span><br><span class="line"></span><br><span class="line">alien_0[<span class="string">&#x27;x_positon&#x27;</span>] = <span class="number">0</span></span><br><span class="line">alien_0[<span class="string">&#x27;y_postion&#x27;</span>] = <span class="number">25</span></span><br><span class="line"><span class="built_in">print</span>(alien_0)</span><br></pre></td></tr></table></figure>

<h3 id="6-2-3-先创建一个空字典"><a href="#6-2-3-先创建一个空字典" class="headerlink" title="6.2.3 先创建一个空字典"></a>6.2.3 先创建一个空字典</h3><p>有时，在空字典中添加键-值对是为了方便，有时则必须如此。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">alien_0 = &#123;&#125;</span><br><span class="line"></span><br><span class="line">alien_0[<span class="string">&#x27;color&#x27;</span>] = <span class="string">&#x27;green&#x27;</span></span><br><span class="line">alien_0[<span class="string">&#x27;points&#x27;</span>] = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(alien_0)</span><br></pre></td></tr></table></figure>

<h3 id="6-2-4-修改字典中的值"><a href="#6-2-4-修改字典中的值" class="headerlink" title="6.2.4 修改字典中的值"></a>6.2.4 修改字典中的值</h3><p>要修改字典中的值，可依次指定字典名、用方括号括起的键以及与该键相关联的新值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">alien_0 = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">alien_0[<span class="string">&#x27;color&#x27;</span>] = <span class="string">&#x27;yellow&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(alien_0)</span><br></pre></td></tr></table></figure>

<h3 id="6-2-5-删除键值对"><a href="#6-2-5-删除键值对" class="headerlink" title="6.2.5 删除键值对"></a>6.2.5 删除键值对</h3><p>使用 del 依据将相应的键值对彻底删除。使用 del 语句时，必须要指定字典名和要删除的键</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">alien_0 = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;points&#x27;</span>: <span class="number">5</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(alien_0)</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> alien_0[<span class="string">&#x27;points&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(alien_0)</span><br></pre></td></tr></table></figure>

<h3 id="6-2-6-由类似对象组成的字典"><a href="#6-2-6-由类似对象组成的字典" class="headerlink" title="6.2.6 由类似对象组成的字典"></a>6.2.6 由类似对象组成的字典</h3><p>使用字典来存储众多对象的同一信息，如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">favorite_languages = &#123;</span><br><span class="line">    <span class="string">&#x27;jen&#x27;</span>: <span class="string">&#x27;python&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sarah&#x27;</span>: <span class="string">&#x27;c&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;edward&#x27;</span>: <span class="string">&#x27;ruby&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;phil&#x27;</span>: <span class="string">&#x27;python&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-3-遍历字典"><a href="#6-3-遍历字典" class="headerlink" title="6.3 遍历字典"></a>6.3 遍历字典</h2><h3 id="6-3-1-遍历所有的键值对"><a href="#6-3-1-遍历所有的键值对" class="headerlink" title="6.3.1 遍历所有的键值对"></a>6.3.1 遍历所有的键值对</h3><p>如下字典存储了一名用户的用户名、姓和名</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">user_0 = &#123;</span><br><span class="line">    <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;efermi&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;first&#x27;</span>: <span class="string">&#x27;enrico&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;last&#x27;</span>: <span class="string">&#x27;fermi&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> user_0.items():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nKey: &quot;</span> + key)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Value: &quot;</span> + value)</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：方法 items()，它返回一个键-值对列表</p>
<h3 id="6-3-2-遍历字典中的所有键"><a href="#6-3-2-遍历字典中的所有键" class="headerlink" title="6.3.2 遍历字典中的所有键"></a>6.3.2 遍历字典中的所有键</h3><p>不需要使用字典中的值时，方法 keys() 很有用。如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">favorite_languages = &#123;</span><br><span class="line">    <span class="string">&#x27;jen&#x27;</span>: <span class="string">&#x27;python&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sarah&#x27;</span>: <span class="string">&#x27;c&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;edward&#x27;</span>: <span class="string">&#x27;ruby&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;phil&#x27;</span>: <span class="string">&#x27;python&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> favorite_languages.keys():</span><br><span class="line">    <span class="built_in">print</span>(name.title())</span><br></pre></td></tr></table></figure>

<p>结果是，输出代码提取字典favorite_languages中的所有键，并依次将他们存储到遍历变量name中。同时，遍历字典时，会默认遍历所有的键，因此，上述代码可以替换成 for name in favorite_languages:，输出不变。</p>
<h3 id="6-3-3-按顺序遍历字典中的所有值"><a href="#6-3-3-按顺序遍历字典中的所有值" class="headerlink" title="6.3.3 按顺序遍历字典中的所有值"></a>6.3.3 按顺序遍历字典中的所有值</h3><p>字典总是明确地记录键值之间的关联关系，但获取字典的元素时，获取顺序是不可预测的。要以特定的顺序返回元素，一种方法便是在 for 循环中对返回的键进行排序，可以使用函数 sorted() 来获得按特定顺序排列的键列表的副本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">favorite_languages = &#123;</span><br><span class="line">    <span class="string">&#x27;jen&#x27;</span>: <span class="string">&#x27;python&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sarah&#x27;</span>: <span class="string">&#x27;c&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;edward&#x27;</span>: <span class="string">&#x27;ruby&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;phil&#x27;</span>: <span class="string">&#x27;python&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> <span class="built_in">sorted</span>(favorite_languages.keys()):</span><br><span class="line">    <span class="built_in">print</span>(name.title())</span><br></pre></td></tr></table></figure>

<h3 id="6-3-4-遍历字典中的所有值"><a href="#6-3-4-遍历字典中的所有值" class="headerlink" title="6.3.4 遍历字典中的所有值"></a>6.3.4 遍历字典中的所有值</h3><p>使用方法 values() 它返回一个值列表，而不包含任何建。但是这种做法提取了字典中的所有值，没有考虑是否重复。为剔除重复项，可使用集合 set，集合类似于列表，但每个元素都必须是独一无二的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">favorite_languages = &#123;</span><br><span class="line">    <span class="string">&#x27;jen&#x27;</span>: <span class="string">&#x27;python&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sarah&#x27;</span>: <span class="string">&#x27;c&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;edward&#x27;</span>: <span class="string">&#x27;ruby&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;phil&#x27;</span>: <span class="string">&#x27;python&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> language <span class="keyword">in</span> <span class="built_in">set</span>(favorite_languages.values()):</span><br><span class="line">    <span class="built_in">print</span>(name.title())</span><br></pre></td></tr></table></figure>

<h2 id="6-4-嵌套"><a href="#6-4-嵌套" class="headerlink" title="6.4 嵌套"></a>6.4 嵌套</h2><h3 id="6-4-1-字典列表"><a href="#6-4-1-字典列表" class="headerlink" title="6.4.1 字典列表"></a>6.4.1 字典列表</h3><p>字典 alien_0 包含了一个外星人的各种信息，但是无法管理成群结队的外星人。如下，创建一个包含三个外星人的列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">alien_0 = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;points&#x27;</span>: <span class="number">5</span>&#125;</span><br><span class="line">alien_1 = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;points&#x27;</span>: <span class="number">10</span>&#125;</span><br><span class="line">alien_2 = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;points&#x27;</span>: <span class="number">15</span>&#125;</span><br><span class="line"></span><br><span class="line">aliens = [alien_0, alien_1, alien_2]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> alien <span class="keyword">in</span> aliens:</span><br><span class="line">    <span class="built_in">print</span>(alien)</span><br></pre></td></tr></table></figure>

<h3 id="6-4-2-在字典中存储列表"><a href="#6-4-2-在字典中存储列表" class="headerlink" title="6.4.2 在字典中存储列表"></a>6.4.2 在字典中存储列表</h3><p>将列表存储在字典中。如下，存储了比萨的两方面信息：外皮类型和配料列表。其中的配料列表是一个与键’topping’相关联的值。要访问该列表，我们使用字典名和键’toppings’。这将返回一个配料列表，而不是单个值。</p>
<p>pizza.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pizza = &#123;</span><br><span class="line">    <span class="string">&#x27;crust&#x27;</span>: <span class="string">&#x27;thick&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;toppings&#x27;</span>: [<span class="string">&#x27;mushrooms&#x27;</span>, <span class="string">&#x27;extra cheese&#x27;</span>],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果，每当需要在<strong>字典中将一个键关联到多个值时，都可以在字典中嵌套一个列表</strong>。</p>
<h3 id="6-4-3-在字典中存储字典"><a href="#6-4-3-在字典中存储字典" class="headerlink" title="6.4.3 在字典中存储字典"></a>6.4.3 在字典中存储字典</h3><p>可以在字典中嵌套字典。例如，如果有多个网站用户，每个都有独特的用户名，可在字典中将用户名作为键，然后将每位用户的信息存储在一个字典中，并将该字典作为与用户名相关联的值。如下，对于每位用户，我们都存储了其三项信息：名、姓和居住地；为访问这些信息，我们遍历所有的用户名，并访问与每个用户名相关两的信息字典</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">users = &#123;</span><br><span class="line">    <span class="string">&#x27;aeinstein&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;first&#x27;</span>: <span class="string">&#x27;albert&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;last&#x27;</span>: <span class="string">&#x27;einstein&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;location&#x27;</span>: <span class="string">&#x27;princeton&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;mcurie&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;first&#x27;</span>: <span class="string">&#x27;marie&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;last&#x27;</span>: <span class="string">&#x27;curie&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;location&#x27;</span>: <span class="string">&#x27;paris&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="7-用户输入和while循环"><a href="#7-用户输入和while循环" class="headerlink" title="7. 用户输入和while循环"></a>7. 用户输入和while循环</h1><h2 id="7-1-函数-input-的工作原理"><a href="#7-1-函数-input-的工作原理" class="headerlink" title="7.1 函数 input() 的工作原理"></a>7.1 函数 input() 的工作原理</h2><p>函数 input() 让程序暂停运行，等待用户输入一些文本。获取用户输入后，Python将其存储在一个变量中以便使用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">message = <span class="built_in">input</span>(<span class="string">&quot;Tell me something, and I will repeat it back to you: &quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(message)</span><br></pre></td></tr></table></figure>

<p>有时，提示可能超过一行，此时可以将提示存储在一个变量中，再将该变量传递给函数 input()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">prompt = <span class="string">&quot;If you tell me who you are, we can personlize the messages you see.&quot;</span></span><br><span class="line">prompt += <span class="string">&quot;\nWhat is your first name? &quot;</span></span><br></pre></td></tr></table></figure>

<p>结果显示如下，</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">If you tell me who you are, we can personalize the messages you see.</span><br><span class="line">What <span class="keyword">is</span> your first name? Eric</span><br><span class="line"></span><br><span class="line">Hello, Eric!</span><br></pre></td></tr></table></figure>

<h3 id="7-1-2-使用-int-来获取数值输入"><a href="#7-1-2-使用-int-来获取数值输入" class="headerlink" title="7.1.2 使用 int() 来获取数值输入"></a>7.1.2 使用 int() 来获取数值输入</h3><p>使用函数 input() 时，Python将用户输入解读为字符串</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; age = input(<span class="string">&quot;How old are you?&quot;</span>)</span><br><span class="line">How old are you?</span><br><span class="line">&gt;&gt;&gt; age</span><br><span class="line"><span class="string">&#x27;21&#x27;</span></span><br></pre></td></tr></table></figure>

<p>函数 int() 将数字的字符串转换为数值表示，如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; age = input(<span class="string">&quot;How old are you?&quot;</span>)</span><br><span class="line">How old are you? 21</span><br><span class="line">&gt;&gt;&gt; age = int(age)</span><br><span class="line">&gt;&gt;&gt; age &gt;= 18</span><br><span class="line">True</span><br></pre></td></tr></table></figure>

<h2 id="7-2-while循环简介"><a href="#7-2-while循环简介" class="headerlink" title="7.2 while循环简介"></a>7.2 while循环简介</h2><h3 id="7-2-1-使用while循环"><a href="#7-2-1-使用while循环" class="headerlink" title="7.2.1 使用while循环"></a>7.2.1 使用while循环</h3><p>使用while循环输出1~5</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">current_number = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> current_number &lt;=<span class="number">5</span>:</span><br><span class="line">    <span class="built_in">print</span>(current_number)</span><br><span class="line">    current_number += <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="7-2-3-使用标志-flag"><a href="#7-2-3-使用标志-flag" class="headerlink" title="7.2.3 使用标志(flag)"></a>7.2.3 使用标志(flag)</h3><p>在要求很多条件都满足才能继续运行的程序中，可定义一个变量，用于判断整个程序是否处于活动状态，这个变量成为<strong>标志</strong>，可以让程序在标志为 True 时继续运行，并在任何事件导致标志的值为 False 时让程序停止运行</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">prompt = <span class="string">&quot;If you tell me who you are, we can personlize the messages you see.&quot;</span></span><br><span class="line">prompt += <span class="string">&quot;\nWhat is your first name? &quot;</span></span><br><span class="line"></span><br><span class="line">active = <span class="literal">True</span></span><br><span class="line"><span class="keyword">while</span> active:</span><br><span class="line">    message = <span class="built_in">input</span>(prompt)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> message = <span class="string">&#x27;quit&#x27;</span>:</span><br><span class="line">        active = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(message)</span><br></pre></td></tr></table></figure>

<h3 id="7-2-4-break与continue"><a href="#7-2-4-break与continue" class="headerlink" title="7.2.4 break与continue"></a>7.2.4 break与continue</h3><p>break: 立即退出while循环，不再运行 循环中余下的代码，也不管条件测试结果如何</p>
<p>continue: 要返回到循环开头，并根据条件测试结果决定是否继续执行循环</p>
<h2 id="7-3-使用while循环来处理列表和字典"><a href="#7-3-使用while循环来处理列表和字典" class="headerlink" title="7.3 使用while循环来处理列表和字典"></a>7.3 使用while循环来处理列表和字典</h2><p>for循环是一种遍历列表的有效方式，但在for循环中不应修改列表，否则将导致Python难以跟踪其中的元素。要在遍历列表的同时对其进行修改，可使用while循环。</p>
<p>通过将while循环同列表和字典结合起来使用，,可收集、存储并组织大量输入，供以后查看和显示</p>
<h3 id="7-3-1-在列表之间移动元素"><a href="#7-3-1-在列表之间移动元素" class="headerlink" title="7.3.1 在列表之间移动元素"></a>7.3.1 在列表之间移动元素</h3><p>使用一个while循环，在验证用户的同时将其从未验证用户列表中提取出来，再将其加入到另一个已验证用户列表中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">unconfirmed_users = [<span class="string">&#x27;alice&#x27;</span>, <span class="string">&#x27;brian&#x27;</span>, <span class="string">&#x27;candace&#x27;</span>]</span><br><span class="line">confirmed_users = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> unconfirmed_users:</span><br><span class="line">    current_user = unconfirmed_users.pop()</span><br><span class="line">    confirmed_users.append(current_user)</span><br></pre></td></tr></table></figure>

<h3 id="7-3-2-删除包含特定值的所有列表元素"><a href="#7-3-2-删除包含特定值的所有列表元素" class="headerlink" title="7.3.2 删除包含特定值的所有列表元素"></a>7.3.2 删除包含特定值的所有列表元素</h3><p>第三章中使用了 remove() 来删除列表中的特定值，前提是要删除的值再列表中只出现了一次</p>
<p>要删除所有这类元素，可不断运行一个while循环，直到列表不再包含值’cat’</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pets = [<span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;goldfish&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;rabbit&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(pets)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="string">&#x27;cat&#x27;</span> <span class="keyword">in</span> pets:</span><br><span class="line">    pets.remove(<span class="string">&#x27;cat&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(pets)</span><br></pre></td></tr></table></figure>

<h3 id="7-3-3-使用用户输入来填充字典"><a href="#7-3-3-使用用户输入来填充字典" class="headerlink" title="7.3.3 使用用户输入来填充字典"></a>7.3.3 使用用户输入来填充字典</h3><p>可使用while循环提示用户输入任意数量的信息</p>
<p>下面创建一个调查程序，其中的循环每执行时都提示输入被调查者的名字和回答</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">responses = []</span><br><span class="line"><span class="comment"># 设置一个标志，指出调查是否继续</span></span><br><span class="line">polling_active = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> polling_active:</span><br><span class="line">    <span class="comment"># 提示输入被调查者的名字和回答</span></span><br><span class="line">    name = <span class="built_in">input</span>(<span class="string">&quot;\nWhat is your name?&quot;</span>)</span><br><span class="line">    response = <span class="built_in">input</span>(<span class="string">&quot;Which moutain would you like to climb someday? &quot;</span>)</span><br><span class="line">    <span class="comment"># 将答卷存储在字典中</span></span><br><span class="line">    responses[name] = response</span><br><span class="line">    <span class="comment"># 看是否还有人要参与调查</span></span><br><span class="line">    repeat = <span class="built_in">input</span>(<span class="string">&quot;Would you like to let another person respond? (yes/no) &quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> repeat == <span class="string">&#x27;no&#x27;</span>:</span><br><span class="line">        polling_active = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调查结束，显示结果</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n--- Poll Results ---&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> name, response <span class="keyword">in</span> responses.items():</span><br><span class="line">    <span class="built_in">print</span>(name + <span class="string">&quot; would like to climb &quot;</span> + response + <span class="string">&quot;.&quot;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="8-函数"><a href="#8-函数" class="headerlink" title="8. 函数"></a>8. 函数</h1><h2 id="8-1-定义函数"><a href="#8-1-定义函数" class="headerlink" title="8.1 定义函数"></a>8.1 定义函数</h2><p>关键字def、函数名、括号、定义以结尾冒号结束</p>
<p>“””xxx””” 为文档字符串(docstring)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">greet_user</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;显示简单的问候语&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello&quot;</span>)</span><br><span class="line"></span><br><span class="line">greet_user()</span><br></pre></td></tr></table></figure>

<h3 id="8-1-1-向函数传递信息"><a href="#8-1-1-向函数传递信息" class="headerlink" title="8.1.1 向函数传递信息"></a>8.1.1 向函数传递信息</h3><p>在函数定义def greet_user()的括号内添加username，通过在这里添加username，可以让函数接受给username指定的任意值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">greet_user</span>(<span class="params">username</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello, &quot;</span> + username.title() + <span class="string">&quot;!&quot;</span>)</span><br><span class="line"></span><br><span class="line">greet_user(<span class="string">&#x27;jesse&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>结果，</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Hello, Jesse!</span><br></pre></td></tr></table></figure>

<h3 id="8-1-2-实参与虚参"><a href="#8-1-2-实参与虚参" class="headerlink" title="8.1.2 实参与虚参"></a>8.1.2 实参与虚参</h3><p>在上面greet_user()的定义中，变量username是一个形参————<strong>函数完成其工作所需的一项信息</strong></p>
<p>在代码greet_user(‘jesse’)中，值’jesse’是一个实参————<strong>调用函数时传递给函数的信息</strong></p>
<p>我们调用函数时，将要让函数使用的信息放在括号中内。在greet_user(‘jesse’)中，将实参’jesse’传递给了函数greet_user()，这个值被存储在形参username中</p>
<h2 id="8-2-传递实参"><a href="#8-2-传递实参" class="headerlink" title="8.2 传递实参"></a>8.2 传递实参</h2><p>函数定义中可能有多个形参，故函数调用中也可能包含多个实参。向函数传递实参的方式：</p>
<p>1.位置实参：要求实参的顺序与形参的顺序相同</p>
<p>2.关键字实参：其中每个实参都由变量名和值组成</p>
<p>3.还可以使用列表和字典</p>
<h3 id="8-2-1-位置实参"><a href="#8-2-1-位置实参" class="headerlink" title="8.2.1 位置实参"></a>8.2.1 位置实参</h3><p>在调用函数过程中，Python必须将函数调用中的每个实参都关联到函数定义中的一个形参。为此，最简单的关联方式是基于实参的顺序————位置实参</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">describe_pet</span>(<span class="params">animal_type, pet_name</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;显示宠物的信息&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nI have a &quot;</span> + animal_type + <span class="string">&quot;.&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;My &quot;</span> + animal_type + <span class="string">&quot;&#x27;s name is &quot;</span> + pet_name.title() + <span class="string">&quot;.&quot;</span>)</span><br><span class="line"></span><br><span class="line">describe_pet(<span class="string">&#x27;hamster&#x27;</span>, <span class="string">&#x27;harry&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>函数的定义表明，需要一种动物类型和一个名字。调用describe_pet()时，，需要按顺序提供一种动物类型和一个名字。如上述，实参’hamster’存储在形参animal_type中，而实参’harry’存储在形参pet_name中。</p>
<p>结果，输出描述了一只名为Harry的仓鼠</p>
<p>1.调用函数多次</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">describe_pet</span>(<span class="params">animal_type, pet_name</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;显示宠物的信息&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nI have a &quot;</span> + animal_type + <span class="string">&quot;.&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;My &quot;</span> + animal_type + <span class="string">&quot;&#x27;s name is &quot;</span> + pet_name.title() + <span class="string">&quot;.&quot;</span>)</span><br><span class="line"></span><br><span class="line">describe_pet(<span class="string">&#x27;hamster&#x27;</span>, <span class="string">&#x27;harry&#x27;</span>)</span><br><span class="line"></span><br><span class="line">describe_pet(<span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;willie&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>在函数中，可根据需要次数使用任意数量的位置实参，Python将按顺序将函数调用中的实参关联到函数定义中相应的形参</p>
<p>2.位置实参的顺序很重要</p>
<h3 id="8-2-2-关键字实参"><a href="#8-2-2-关键字实参" class="headerlink" title="8.2.2 关键字实参"></a>8.2.2 关键字实参</h3><p>关键字实参时传递给函数的名称-值对。关键字实参使我们无需考虑函数调用中的实参顺序，还清楚地指出了函数调用中各个值的用途</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">describe_pet</span>(<span class="params">animal_type, pet_name</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;显示宠物的信息&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nI have a &quot;</span> + animal_type + <span class="string">&quot;.&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;My &quot;</span> + animal_type + <span class="string">&quot;&#x27;s name is &quot;</span> + pet_name.title() + <span class="string">&quot;.&quot;</span>)</span><br><span class="line"></span><br><span class="line">describe_pet(animal_type=<span class="string">&#x27;hamster&#x27;</span>, pet_name=<span class="string">&#x27;harry&#x27;</span>)</span><br><span class="line"><span class="comment"># 等价于</span></span><br><span class="line">describe_pet(pet_name=<span class="string">&#x27;harry&#x27;</span>, animal_type=<span class="string">&#x27;hamster&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>关键字实参的顺序无关紧要，弹药准确地指定函数定义中的形参名</p>
<h3 id="8-2-3-默认值"><a href="#8-2-3-默认值" class="headerlink" title="8.2.3 默认值"></a>8.2.3 默认值</h3><p>在调用函数中给形参提供了实参时，Python将使用指定的实参值；否则，则使用形参的默认值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">describe_pet</span>(<span class="params">pet_name, animal_type=<span class="string">&#x27;dog&#x27;</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;显示宠物的信息&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nI have a &quot;</span> + animal_type + <span class="string">&quot;.&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;My &quot;</span> + animal_type + <span class="string">&quot;&#x27;s name is &quot;</span> + pet_name.title() + <span class="string">&quot;.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># describe_pet(&#x27;hamster&#x27;, &#x27;harry&#x27;)</span></span><br><span class="line"></span><br><span class="line">describe_pet(<span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;willie&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>注意，在这个函数定义中，修改了形参的排列顺序。由于给animal_type指定了默认值，无需通过实参来指定动物类型，因此在函数调用中只包含一个实参————宠物的名字。但是，Python仍将这个实参视为位置实参，因此如果函数调用中只包含宠物的名字，这个实参将关联到函数定义中的第一个形参。这就是将pet_name放在形参列表开头的原因。</p>
<p>1.在调用中只提供小狗的名字</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">describe_pet(<span class="string">&#x27;willie&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>只提供了一个实参————‘willie’，这个实参将关联到函数定义中的第一个形参————pet_name。由于没有给animal_type提供实参，因此Python使用其默认值’dog’</p>
<p>2.描述的不是小狗</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">describe_pet(pet_name=<span class="string">&#x27;harry&#x27;</span>, animal_type=<span class="string">&#x27;hamster&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>由于显式地给animal_type提供了实参，因此Python将忽略这个形参的默认值</p>
<h3 id="8-2-4-等效的函数调用"><a href="#8-2-4-等效的函数调用" class="headerlink" title="8.2.4 等效的函数调用"></a>8.2.4 等效的函数调用</h3><p>可以混合使用位置实参、关键字实参和默认值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">describe_pet</span>(<span class="params">pet_name, animal_type=<span class="string">&#x27;dog&#x27;</span></span>):</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一条名为Willie的小狗</span></span><br><span class="line">describe_pet(<span class="string">&#x27;willie&#x27;</span>)</span><br><span class="line">describe_pet(pet_name=<span class="string">&#x27;willie&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一只名为Harry的仓鼠</span></span><br><span class="line">describe_pet(<span class="string">&#x27;harry&#x27;</span>,<span class="string">&#x27;hamster&#x27;</span>)</span><br><span class="line">describe_pet(pet_name=<span class="string">&#x27;harry&#x27;</span>, animal_type=<span class="string">&#x27;hamster&#x27;</span>)</span><br><span class="line">describe_pet(animal_type=<span class="string">&#x27;hamster&#x27;</span>, pet_name=<span class="string">&#x27;harry&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>这些函数调用都可以</p>
<h2 id="8-3-返回值"><a href="#8-3-返回值" class="headerlink" title="8.3 返回值"></a>8.3 返回值</h2><p>在函数中，可使用return语句将值返回到调用函数的代码行。</p>
<h3 id="8-3-1-返回简单值"><a href="#8-3-1-返回简单值" class="headerlink" title="8.3.1 返回简单值"></a>8.3.1 返回简单值</h3><p>函数接受名和姓并返回整洁的姓名:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_formatted_name</span>(<span class="params">first_name, last_name</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;返回整洁的姓名&quot;&quot;&quot;</span></span><br><span class="line">    full_name = first_name + last_name</span><br><span class="line">    <span class="keyword">return</span> full_name.title()</span><br><span class="line"></span><br><span class="line">musician = get_formatted_name(<span class="string">&#x27;jimi&#x27;</span>, <span class="string">&#x27;hendrix&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(musician)</span><br></pre></td></tr></table></figure>

<p>结果，</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Jimi Hendrix</span><br></pre></td></tr></table></figure>

<h3 id="8-3-2-让实参变成可选的"><a href="#8-3-2-让实参变成可选的" class="headerlink" title="8.3.2 让实参变成可选的"></a>8.3.2 让实参变成可选的</h3><p>可通过使用默认值来让实参变成可选的</p>
<p>扩展get_formatted_name，使其还处理中间名</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_formatted_name</span>(<span class="params">first_name, middle_name, last_name</span>):</span><br><span class="line"></span><br><span class="line">    full_name = first_name + <span class="string">&#x27; &#x27;</span> + middle_name + <span class="string">&#x27; &#x27;</span> + last_name</span><br><span class="line">    <span class="keyword">return</span> full_name.title()</span><br><span class="line"></span><br><span class="line">musician = get_formatted_name(<span class="string">&#x27;john&#x27;</span>, <span class="string">&#x27;lee&#x27;</span>, <span class="string">&#x27;hooker&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(musician)</span><br></pre></td></tr></table></figure>

<p>为了让中间名变成可选的，可给形参middle_name指定一个默认值————空字符串，并在用户没有提供中间名时不是用这个形参。为让get_formatted_name()在没有提供中间名时依然可行，可给形参middle_name指定一个默认值————空字符串，并将其移到<strong>形参列表的末尾</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_formatted_name</span>(<span class="params">first_name, last_name, middle_name=<span class="string">&#x27;&#x27;</span></span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> middle_name:</span><br><span class="line">        </span><br><span class="line">        full_name = first_name + <span class="string">&#x27; &#x27;</span> + middle_name + <span class="string">&#x27; &#x27;</span> + last_name</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        full_name = first_name + <span class="string">&#x27; &#x27;</span> + last_name</span><br><span class="line">    <span class="comment"># return full_name.title()</span></span><br><span class="line"></span><br><span class="line">musician = get_formatted_name(<span class="string">&#x27;jimi&#x27;</span>, <span class="string">&#x27;hendrix&#x27;</span>)</span><br><span class="line">musician = get_formatted_name(<span class="string">&#x27;john&#x27;</span>, <span class="string">&#x27;hooker&#x27;</span>, <span class="string">&#x27;lee&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(musician)</span><br></pre></td></tr></table></figure>

<p>结果，对于指定名和姓，直接调用；如果还包括中间名，就必须确保它是最后一个实参</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Jimi Hendrix</span><br><span class="line">John Lee Hooker</span><br></pre></td></tr></table></figure>

<h3 id="8-3-3-返回字典"><a href="#8-3-3-返回字典" class="headerlink" title="8.3.3 返回字典"></a>8.3.3 返回字典</h3><p>下面函数接受姓名的组成部分，并返回一个表示人的字典</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">build_person</span>(<span class="params">first_name, last_name</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;返回一个字典，其中包含有关一个人的信息&quot;&quot;&quot;</span></span><br><span class="line">    person = &#123;<span class="string">&#x27;first&#x27;</span>: first_name, <span class="string">&#x27;last&#x27;</span>: last_name&#125;</span><br><span class="line">    <span class="keyword">return</span> person</span><br><span class="line"></span><br><span class="line">musician = build_person(<span class="string">&#x27;jimi&#x27;</span>, <span class="string">&#x27;hendrix&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(musician)</span><br></pre></td></tr></table></figure>

<p>存储first_name值时，使用的键为’first’，存储last_name值时，使用的键为’last’。最后返回表示人的整个字典，并打印这个返回的值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;first&#x27;</span>: <span class="string">&#x27;jimi&#x27;</span>, <span class="string">&#x27;last&#x27;</span>: <span class="string">&#x27;hendrix&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>

<p>进行额外的信息补充</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">build_person</span>(<span class="params">first_name, last_name, age=<span class="string">&#x27;&#x27;</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;返回一个字典，其中包含有关一个人的信息&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># person = &#123;&#x27;first&#x27;: first_name, &#x27;last&#x27;: last_name&#125;</span></span><br><span class="line">    <span class="keyword">if</span> age:</span><br><span class="line">        person[<span class="string">&#x27;age&#x27;</span>] = age</span><br><span class="line">    <span class="comment"># return person</span></span><br><span class="line"></span><br><span class="line">musician = build_person(<span class="string">&#x27;jimi&#x27;</span>, <span class="string">&#x27;hendrix&#x27;</span>, age=<span class="number">27</span>)</span><br><span class="line"><span class="built_in">print</span>(musician)</span><br></pre></td></tr></table></figure>

<h3 id="8-3-4-结合使用函数和while循环"><a href="#8-3-4-结合使用函数和while循环" class="headerlink" title="8.3.4 结合使用函数和while循环"></a>8.3.4 结合使用函数和while循环</h3><p>下面尝试使用名和姓跟用户打招呼:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_formatted_name</span>(<span class="params">first_name, last_name</span>):</span><br><span class="line"></span><br><span class="line">    full_name = first_name + <span class="string">&#x27; &#x27;</span> + last_name</span><br><span class="line">    <span class="keyword">return</span> full_name.title()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nPlease tell me your name:&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;(enter &#x27;q&#x27; at any time to quit)&quot;</span>)</span><br><span class="line"></span><br><span class="line">    f_name = <span class="built_in">input</span>(<span class="string">&quot;First name: &quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> f_name == <span class="string">&#x27;q&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    </span><br><span class="line">    l_name = <span class="built_in">input</span>(<span class="string">&quot;Last name: &quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> l_name == <span class="string">&#x27;q&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    </span><br><span class="line">    formatted_name = get_formatted_name(f_name, l_name)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nHello, &quot;</span> + formatted_name + <span class="string">&quot;!&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>结果，</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">Please tell me your name:</span><br><span class="line">(enter &#x27;q&#x27; at any time to quit)</span><br><span class="line">First name: <span class="strong">**eric**</span></span><br><span class="line">Last name: <span class="strong">**matthes**</span></span><br><span class="line"></span><br><span class="line">Hello, Eric Matthes!</span><br><span class="line"></span><br><span class="line">Please tell me your name:</span><br><span class="line">(enter &#x27;q&#x27; at any time to quit)</span><br><span class="line">First name: <span class="strong">**q**</span></span><br></pre></td></tr></table></figure>

<h2 id="8-4-传递列表"><a href="#8-4-传递列表" class="headerlink" title="8.4 传递列表"></a>8.4 传递列表</h2><p>像函数传递列表，这种列表包含的可能是名字、数字或更复杂的对象（如字典）。将列表传递给函数后，函数就能直接访问其内容</p>
<p>假设一个用户列表，我们问候其中的每位用户</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">greet_users</span>(<span class="params">names</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;向列表中的每位用户都发出简单的问候&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">        msg = <span class="string">&quot;Hello, &quot;</span> + name.title() + <span class="string">&quot;!&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(msg)</span><br><span class="line"></span><br><span class="line">usernames = [<span class="string">&#x27;hannah&#x27;</span>, <span class="string">&#x27;ty&#x27;</span>, <span class="string">&#x27;margot&#x27;</span>]</span><br><span class="line">greet_users(usernames)</span><br></pre></td></tr></table></figure>

<p>结果，</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Hello, Hannah!</span><br><span class="line">Hello, Ty!</span><br><span class="line">Hello, Margot!</span><br></pre></td></tr></table></figure>

<h3 id="8-4-1-在函数中修改列表"><a href="#8-4-1-在函数中修改列表" class="headerlink" title="8.4.1 在函数中修改列表"></a>8.4.1 在函数中修改列表</h3><p>将列表传递给函数后，函数就可对其进行修改。在函数中对列表所做的任何修改都是永久性的。</p>
<p>第一个函数负责处理打印设计的工作，第二个将概述打印了哪些设计</p>
<p>printing_models.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">print_models</span>(<span class="params">unprinted_designs, completed_models</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    模拟打印每个设计，直到没有未打印的设计为止</span></span><br><span class="line"><span class="string">    打印每个设计后，都将其移到列表completed_models中</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> unprinted_designs:</span><br><span class="line">        current_design = unprrinted_designs.pop()</span><br><span class="line">        <span class="comment"># 模拟根据设计制作3D打印模型的过程</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Printing model: &quot;</span> + current_design)</span><br><span class="line">        completed_models.append(current_design)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_completed_models</span>(<span class="params">completed_models</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;显示打印好的所有模型&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nThe following models has been printed:&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> completed_model <span class="keyword">in</span> completed_models:</span><br><span class="line">        <span class="built_in">print</span>(completed_model)</span><br><span class="line"></span><br><span class="line">unprinted_designs = [<span class="string">&#x27;iphone case&#x27;</span>, <span class="string">&#x27;robot pendant&#x27;</span>, <span class="string">&#x27;dodecahedron&#x27;</span>]</span><br><span class="line">completed_models = []</span><br><span class="line"></span><br><span class="line">print_models(unprinted_designs, completed_models)</span><br><span class="line">show_completed_models(completed_models)</span><br></pre></td></tr></table></figure>

<h3 id="8-4-2-禁止函数修改列表"><a href="#8-4-2-禁止函数修改列表" class="headerlink" title="8.4.2 禁止函数修改列表"></a>8.4.2 禁止函数修改列表</h3><p>为了解决问题，可以向函数传递列表的副本而不是原件；这样函数所做的任何修改都只影响副本，而不影响原件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将列表的副本传递给函数</span></span><br><span class="line">function_name(list_name[:])</span><br></pre></td></tr></table></figure>

<p>切片表示法[:]创建列表的副本。在printing_models.py中，如果不想清空未打印的设计列表，可像下面调用print_models():</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print_models(unprinted_designs[:], completed_models)</span><br></pre></td></tr></table></figure>

<p>虽然向函数传递列表的副本可保留原始列表的内容，但建议将原始列表传递给函数，从而提高效率</p>
<h2 id="8-5-传递任意数量的实参"><a href="#8-5-传递任意数量的实参" class="headerlink" title="8.5 传递任意数量的实参"></a>8.5 传递任意数量的实参</h2><p>有时，预先不知道函数需要接受多少个实参，Python允许函数从调用语句中收集任意数量的实参</p>
<p>pizza.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">make_pizza</span>(<span class="params">*toppings</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;打印顾客点的所有配料&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(toppings)</span><br><span class="line"></span><br><span class="line">make_pizza(<span class="string">&#x27;pepperoni&#x27;</span>)</span><br><span class="line">make_pizza(<span class="string">&#x27;mushrooms&#x27;</span>, <span class="string">&#x27;green peppers&#x27;</span>, <span class="string">&#x27;extra cheese&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>形参名*toppings中的星号让Python创建一个名为toppings的空元组，并将收到的所有值都封装到这个元组中。注意，Python将实参封装到一个元组中，即便函数只收到一个值也如此</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(<span class="string">&#x27;pepperoni&#x27;</span>,)</span><br><span class="line">(<span class="string">&#x27;mushrooms&#x27;</span>, <span class="string">&#x27;green pepper&#x27;</span>, <span class="string">&#x27;extra cheese&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>下面将print语句替换为一个循环，对配料列表进行遍历，并对顾客点的比萨进行描述：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">make_pizza</span>(<span class="params">*toppings</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nMaking a pizza with the following toppings:&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> topping <span class="keyword">in</span> toppings:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;- &quot;</span> + topping)</span><br><span class="line">    </span><br><span class="line">make_pizza(<span class="string">&#x27;pepperoni&#x27;</span>)</span><br><span class="line">make_pizza(<span class="string">&#x27;mushrooms&#x27;</span>, <span class="string">&#x27;green peppers&#x27;</span>, <span class="string">&#x27;extra cheese&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>结果如下，</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Making a pizza <span class="keyword">with</span> the following toppings:</span><br><span class="line">- pepperoni</span><br><span class="line"></span><br><span class="line">Making a pizza <span class="keyword">with</span> the following toppings:</span><br><span class="line">- mushrooms</span><br><span class="line">- green peppers</span><br><span class="line">- extra cheese</span><br></pre></td></tr></table></figure>

<h3 id="8-5-1-结合使用位置实参和任意数量实参"><a href="#8-5-1-结合使用位置实参和任意数量实参" class="headerlink" title="8.5.1 结合使用位置实参和任意数量实参"></a>8.5.1 结合使用位置实参和任意数量实参</h3><p>为了让函数接收不同类型的实参，必须在函数定义中将接纳任意数量实参的形参放在最后。Python先匹配位置实参和关键字实参，再将余下的实参都收集到最后一个形参中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">make_pizza</span>(<span class="params">size, *toppings</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nMaking a &quot;</span> + <span class="built_in">str</span>(size) + <span class="string">&quot;-inch pizza with the following toppings:&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> topping <span class="keyword">in</span> toppings:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;- &quot;</span> + topping)</span><br><span class="line">    </span><br><span class="line">make_pizza(<span class="number">16</span>, <span class="string">&#x27;pepperoni&#x27;</span>)</span><br><span class="line">make_pizza(<span class="number">12</span>, <span class="string">&#x27;mushrooms&#x27;</span>, <span class="string">&#x27;green peppers&#x27;</span>, <span class="string">&#x27;extra cheese&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="8-5-2-使用任意数量的关键字实参"><a href="#8-5-2-使用任意数量的关键字实参" class="headerlink" title="8.5.2 使用任意数量的关键字实参"></a>8.5.2 使用任意数量的关键字实参</h3><p>有时，需要接受任意数量的实参，但预先不知道传递给函数的会是什么样的信息，将函数编写成能够接受任意数量的键-值对————调用语句提供多少就接受多少</p>
<p>下面函数build_profile()接受名和姓，同时还接受任意数量的关键字实参</p>
<p>user_profile.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">build_profile</span>(<span class="params">first, last, **user_info</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;创建一个字典，其中包含我们知道的有关用户的一切&quot;&quot;&quot;</span></span><br><span class="line">    profile = &#123;&#125;</span><br><span class="line">    profile[<span class="string">&#x27;first_name&#x27;</span>] = first</span><br><span class="line">    profile[<span class="string">&#x27;last_name&#x27;</span>] = last</span><br><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> user_info.items():</span><br><span class="line">        profile[key] = value</span><br><span class="line">    <span class="keyword">return</span> profile</span><br><span class="line"></span><br><span class="line">user_info = build_profile(<span class="string">&#x27;albert&#x27;</span>, <span class="string">&#x27;einstein&#x27;</span>, location=<span class="string">&#x27;princeton&#x27;</span>, field=<span class="string">&#x27;physics&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(uer_info)</span><br></pre></td></tr></table></figure>

<p>形参**user_info中的两个星号让Python创建一个名为user_info的空字典，并将收到的所有名称-值对都封装到这个字典中，在这个函数中，可以像访问其他字典那样访问user_info中的名称-值对</p>
<p>结果，</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;first_name&#x27;</span>: <span class="string">&#x27;albert&#x27;</span>, <span class="string">&#x27;last_name&#x27;</span>: <span class="string">&#x27;einstein&#x27;</span>, <span class="string">&#x27;location&#x27;</span>: <span class="string">&#x27;princeton&#x27;</span>, <span class="string">&#x27;field&#x27;</span>=<span class="string">&#x27;physics&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>

<h2 id="8-6-将函数存储在模块中"><a href="#8-6-将函数存储在模块中" class="headerlink" title="8.6 将函数存储在模块中"></a>8.6 将函数存储在模块中</h2><p>将函数存储在被称为<em>模块</em>的独立文件中，再将模块<em>导入</em>到主程序中。import语句允许在当前运行的程序文件中使用模块中的代码</p>
<h3 id="8-6-1-导入整个模块"><a href="#8-6-1-导入整个模块" class="headerlink" title="8.6.1 导入整个模块"></a>8.6.1 导入整个模块</h3><p><em>模块</em>是扩展名为.py的文件</p>
<p>下面创建一个包含函数make_pizza()的模块。为此，将文件pizza.py中除函数make_pizza()之外的其他代码删除</p>
<p>pizza.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">make_pizza</span>(<span class="params">size, *toppings</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nMaking a &quot;</span> + <span class="built_in">str</span>(size) + </span><br><span class="line">    <span class="string">&quot;-inch pizza with the following toppings:&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> topping <span class="keyword">in</span> toppings:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;- &quot;</span> + topping)</span><br></pre></td></tr></table></figure>

<p>接下来，在pizza.py所在的目录中创建另一个名为making_pizza.py的文件，这个文件导入刚才创建的模块，再调用make_pizza()两次</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pizza</span><br><span class="line"></span><br><span class="line">pizza.make_pizza(<span class="number">16</span>, <span class="string">&#x27;pepperoni&#x27;</span>)</span><br><span class="line">pizza.make_pizza(<span class="number">12</span>, <span class="string">&#x27;mushrooms&#x27;</span>, <span class="string">&#x27;green peppers&#x27;</span>, <span class="string">&#x27;extra cheese&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>使用import语句并在其中指定模块名，便可以在程序中使用该模块中的所有函数，如果使用import语句导入了名为module_name.py的整个模块，便可以如下使用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">module_name.function_name()</span><br></pre></td></tr></table></figure>

<h3 id="8-6-2-导入特定的模块"><a href="#8-6-2-导入特定的模块" class="headerlink" title="8.6.2 导入特定的模块"></a>8.6.2 导入特定的模块</h3><p>导入模块中特定的函数，导入方法如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> module_name <span class="keyword">import</span> function_name</span><br><span class="line"></span><br><span class="line">通过逗号分隔函数名</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> module_name <span class="keyword">import</span> function_0, function_1, function_2</span><br><span class="line"></span><br><span class="line">对于前面的making_pizza.py示例，如果只是想导入要使用的函数</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pizza <span class="keyword">import</span> make_pizza</span><br><span class="line"></span><br><span class="line">make_pizza(<span class="number">16</span>, <span class="string">&#x27;pepperoni&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="8-6-3-使用as给函数指定别名"><a href="#8-6-3-使用as给函数指定别名" class="headerlink" title="8.6.3 使用as给函数指定别名"></a>8.6.3 使用as给函数指定别名</h3><p>给函数指定外号</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pizza <span class="keyword">import</span> make_pizza <span class="keyword">as</span> mp</span><br><span class="line"></span><br><span class="line">mp(<span class="number">16</span>, <span class="string">&#x27;pepperoni&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="8-6-4-使用as给模块指定别名"><a href="#8-6-4-使用as给模块指定别名" class="headerlink" title="8.6.4 使用as给模块指定别名"></a>8.6.4 使用as给模块指定别名</h3><p>给模块指定简短的别名(如给模块pizza指定别名p)，更为简单地调用，如pizza.make_pizza(),p.make_pizza()后者更为简洁</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pizza <span class="keyword">as</span> p</span><br><span class="line"></span><br><span class="line">p.make_pizza(<span class="number">16</span>, <span class="string">&#x27;pepperoni&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> module_name <span class="keyword">as</span> mn</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="8-6-5-导入模块中的所有函数"><a href="#8-6-5-导入模块中的所有函数" class="headerlink" title="8.6.5 导入模块中的所有函数"></a>8.6.5 导入模块中的所有函数</h3><p>使用星号（*）运算符可让python导入模块中的所有函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pizza <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">make_pizza(<span class="number">16</span>, <span class="string">&#x27;pepperoni&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="9-类"><a href="#9-类" class="headerlink" title="9. 类"></a>9. 类</h1><h2 id="9-1-创建和使用类"><a href="#9-1-创建和使用类" class="headerlink" title="9.1 创建和使用类"></a>9.1 创建和使用类</h2><h3 id="9-1-1-创建dog类"><a href="#9-1-1-创建dog类" class="headerlink" title="9.1.1 创建dog类"></a>9.1.1 创建dog类</h3><p>根据Dog类创建的每个实例都将存储名字和年龄，并赋予每条小狗坐下和打滚的能力</p>
<p>dog.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;一次模拟小狗的简单尝试&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_init_</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化属性namne和age&quot;&quot;&quot;</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sit</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;模拟小狗被命令时蹲下&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(self.name.title() + <span class="string">&quot;is now sitting.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">roll_over</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;模拟小狗被命令时打滚&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(self.name.title() + <span class="string">&quot;rolled over!&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在Python中，首字母大学的名称指<strong>类</strong></p>
<p>1.方法_init_()</p>
<p>类中的函数称为方法；<em>init</em>()是一个特殊的方法，每当根据Dog类创建新实例时，都会自动被调用。方法_init()<em>定义包含了三个形参:self、name和age。形参self必不可少且位于最前面。因为python调用这个_init</em>()方法来创建Dog实例时，将自动传入实参self。每个与类相关联的方法调用都会自动传递实参self，它是一个指向实例本身的引用，<strong>让实例能够访问类中的属性和方法</strong>。</p>
<p>在我们创建Dog实例时，Python将调用Dog类的方法_init()_。我们将通过实参向Dog()传递名字和年龄;self会自动传递，因此我们不需要传递它。每当我们根据Dog类创建实例时，都只需给最后两个形参(name和age)提供值。</p>
<p>以self为前缀的变量都可供类中的所有方法使用，我们还可以通过类的任意实例来访问这些变量。self.name = name 获取存储在形参name中的值，并将其存储在变量name中，然后<strong>该变量被关联到当前创建的实例</strong>。</p>
<h3 id="9-1-2-根据类创建实例"><a href="#9-1-2-根据类创建实例" class="headerlink" title="9.1.2 根据类创建实例"></a>9.1.2 根据类创建实例</h3><p>类可以看作有关如何创建实例的说明。下面创建一个表示特定小狗的实例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>():</span><br><span class="line">    --snip--</span><br><span class="line"></span><br><span class="line">my_dog = Dog(<span class="string">&#x27;willie&#x27;</span>, <span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;My dog&#x27;s name is &quot;</span> + my_dog.name.title() + <span class="string">&quot;.&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;My dog is &quot;</span> + <span class="built_in">str</span>(my_dog.age) + <span class="string">&quot;years old.&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>上述代码的过程，Python使用实参’williw’和6调用Dog类中的方法_init_()。方法_init_()  创建一个表示特定小狗的实例，并使用我们提供的值来设置属性name和age。方法_init_()并未显式地包含return语句，但Python自动返回一个表示这条小狗的实例。我们将这个实例存储在变量my_dog中。</p>
<p>通常可以认为首字母大写的名称为类，小写的名称为类创建的实例。</p>
<p>1.访问属性</p>
<p>要访问实例的属性，可以使用句点表示法。如 my_dog.name 这演示了Python如何获悉属性的值。这个过程是，Python先找到实例my_dog，再查找与这个实例相关联的属性name。在Dog类中引用这个属性时，使用的是self.name。</p>
<p>2.调用方法</p>
<p>根据Dog类创建实例后，可以使用句点表示法来调用Dog类中的定义的任何方法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>():</span><br><span class="line">    --snip--</span><br><span class="line">    </span><br><span class="line">    my_dog = (<span class="string">&#x27;willie&#x27;</span>, <span class="number">6</span>)</span><br><span class="line">    my_dog.sit()</span><br><span class="line">    my_dog.roll_over()</span><br></pre></td></tr></table></figure>

<p>调用方法时，指定实例的名称和要调用的方法，并用句号分隔。遇到my_dog.sit()时，Python在类Dog中查找方法sit()并运行其代码。</p>
<p>3.创建多个实例</p>
<p>根据类创建任意数量的实例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>():</span><br><span class="line">    --snip--</span><br><span class="line"></span><br><span class="line">    my_dog = Dog(<span class="string">&#x27;willie&#x27;</span>, <span class="number">6</span>)</span><br><span class="line">    your_dog = Dog(<span class="string">&#x27;lucy&#x27;</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">my_dog.sit()</span><br><span class="line">your_dog.sit()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="9-2-使用类和实例"><a href="#9-2-使用类和实例" class="headerlink" title="9.2 使用类和实例"></a>9.2 使用类和实例</h2><p>修改实例的属性，可以直接修改实例的属性，也可以编写方法以特定的方式进行修改</p>
<h3 id="9-2-1-Car类"><a href="#9-2-1-Car类" class="headerlink" title="9.2.1 Car类"></a>9.2.1 Car类</h3><p>car.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;一次模拟汽车的简单尝试&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_init_</span>(<span class="params">self, make, model, year</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化描述汽车的属性&quot;&quot;&quot;</span></span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_descriptive_name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回整洁的描述性信息&quot;&quot;&quot;</span></span><br><span class="line">        long_name = <span class="built_in">str</span>(self.year) + <span class="string">&#x27; &#x27;</span> + self.make + <span class="string">&#x27; &#x27;</span> + self.model</span><br><span class="line">        <span class="keyword">return</span> long_name.title()</span><br><span class="line"></span><br><span class="line">my_new_car = Car(<span class="string">&#x27;audi&#x27;</span>, <span class="string">&#x27;a4&#x27;</span>, <span class="number">2016</span>)</span><br><span class="line"><span class="built_in">print</span>(my_new_car.get_descriptive_name())</span><br></pre></td></tr></table></figure>

<p>方法_init_()接受这些形参的值，并将它们存储在根据这个类创建的实例中的属性中。创建新的Car实例时，我们需要指定其制造商、型号和生产年份</p>
<h3 id="9-2-2-给属性指定默认值"><a href="#9-2-2-给属性指定默认值" class="headerlink" title="9.2.2 给属性指定默认值"></a>9.2.2 给属性指定默认值</h3><p>类中的每个属性都必须有初始值，即使是0或空字符串。有时设置默认值时，在方法_init_()内指定这种初始值是可行的；如果对某个属性这样做了，就无需包含为它提供初始值的形参。</p>
<p>下面创建添加一个名为odometer_reading的属性，其初始值总是为0。同时添加一个名为read_odometer()的方法，用于读取汽车的里程表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;一次模拟汽车的简单尝试&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_init_</span>(<span class="params">self, make, model, year</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化描述汽车的属性&quot;&quot;&quot;</span></span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line">        self.odometer_reading = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_descriptive_name</span>(<span class="params">self</span>):</span><br><span class="line">        --snip--</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">read_odometer</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;打印一条指出汽车里程的信息&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;This car has &quot;</span> + <span class="built_in">str</span>(self.odometer_reading) + <span class="string">&quot; miles on it.&quot;</span>)</span><br><span class="line"></span><br><span class="line">my_new_car.read_odometer()</span><br></pre></td></tr></table></figure>

<p>当Python调用方法_init_()来创建新实例时，将以属性的方式存储制造商、型号和生产年份。之后，Python将创建一个名为odometer_reading的属性，并将其初始值设置为0</p>
<h3 id="9-2-3-修改属性的值"><a href="#9-2-3-修改属性的值" class="headerlink" title="9.2.3 修改属性的值"></a>9.2.3 修改属性的值</h3><p>三种方法修改属性的值：直接通过实例进行修改；通过方法进行设置；通过方法进行递增(增加特定的值)</p>
<p>1.直接修改属性的值</p>
<p>修改属性的值，通过实例直接访问它。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>():</span><br><span class="line">    --snip--</span><br><span class="line"></span><br><span class="line">my_new_car = Car(<span class="string">&#x27;audi&#x27;</span>, <span class="string">&#x27;a4&#x27;</span>, <span class="number">2016</span>)</span><br><span class="line"></span><br><span class="line">my_new_car.odometer_reading = <span class="number">23</span></span><br><span class="line">my_new_car.read_odometer()</span><br></pre></td></tr></table></figure>

<p>2.通过方法修改属性的值</p>
<p>通过方法无需直接访问属性，而可将值传递给一个方法，由它在内部更新</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>():</span><br><span class="line">    --snip--</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update_odometer</span>(<span class="params">self, mileage</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;将里程表读书设置为指定的值&quot;&quot;&quot;</span></span><br><span class="line">        self.odometer_reading = mileage</span><br><span class="line"></span><br><span class="line">my_new_car = Car(<span class="string">&#x27;audi&#x27;</span>, <span class="string">&#x27;a4&#x27;</span>, <span class="number">2016</span>)</span><br><span class="line"><span class="built_in">print</span>(my_new_car.get_descriptive_name())</span><br><span class="line"></span><br><span class="line">my_new_car.update_odometer(<span class="number">23</span>)</span><br><span class="line">my_new_car.read_odometer()</span><br></pre></td></tr></table></figure>

<p>方法update_odometer()接受一个里程值，并将其存储在self.odometer_reading中。上述代码中，我们调用了update_odometer()，并向他提供了实参23（该实参对应于方法定义中的形参mileage)。</p>
<p>下面对方法update_odometer()进行扩展，禁止任何人将里程表读数往回调:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>():</span><br><span class="line">    --snip--</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update_odometer</span>(<span class="params">self, mileage</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        将里程表读数设置为指定的值</span></span><br><span class="line"><span class="string">        禁止将里程碑表读数往回调</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> mileage &gt;= self.odometer_reading:</span><br><span class="line">            self.odometer_reading = mileage</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;You can&#x27;t roll back an odometer!&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>3.通过方法对属性的值进行递增</p>
<p>有时需要将属性值递增指定的量</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>():</span><br><span class="line">    --snip--</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update_odometer</span>(<span class="params">self, mileage</span>):</span><br><span class="line">        --snip--</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">increment_odometer</span>(<span class="params">self, miles</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;将里程表读数增加指定的量&quot;&quot;&quot;</span></span><br><span class="line">        self.odometer_reading += miles</span><br><span class="line"></span><br><span class="line">my_used_car = Car(<span class="string">&#x27;subaru&#x27;</span>, <span class="string">&#x27;outback&#x27;</span>, <span class="number">2013</span>)</span><br><span class="line"><span class="built_in">print</span>(my_used_car.get_descriptive_name())</span><br><span class="line"></span><br><span class="line">my_used_car.update_odometer(<span class="number">23500</span>)</span><br><span class="line">my_used_car.read_odometer()</span><br><span class="line"></span><br><span class="line">my_used_car.increment_odometer(<span class="number">100</span>)</span><br><span class="line">my_used_car.read_odometer()</span><br></pre></td></tr></table></figure>

<h2 id="9-3-继承"><a href="#9-3-继承" class="headerlink" title="9.3 继承"></a>9.3 继承</h2><h3 id="9-3-1-子类的方法-init"><a href="#9-3-1-子类的方法-init" class="headerlink" title="9.3.1 子类的方法_init_()"></a>9.3.1 子类的方法_init_()</h3><p>一个类继承另一个类时，它将自动获得另一个类的所有属性和方法</p>
<p>electric_car.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>():</span><br><span class="line">    --snip--</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update_odometer</span>(<span class="params">self, mileage</span>):</span><br><span class="line">        --snip--</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">increment_odometer</span>(<span class="params">self, miles</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;将里程表读数增加指定的量&quot;&quot;&quot;</span></span><br><span class="line">        self.odometer_reading += miles</span><br><span class="line"></span><br><span class="line">my_used_car = Car(<span class="string">&#x27;subaru&#x27;</span>, <span class="string">&#x27;outback&#x27;</span>, <span class="number">2013</span>)</span><br><span class="line"><span class="built_in">print</span>(my_used_car.get_descriptive_name())</span><br><span class="line"></span><br><span class="line">my_used_car.update_odometer(<span class="number">23500</span>)</span><br><span class="line">my_used_car.read_odometer()</span><br><span class="line"></span><br><span class="line">my_used_car.increment_odometer(<span class="number">100</span>)</span><br><span class="line">my_used_car.read_odometer()</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ElectricCar</span>(<span class="title class_ inherited__">Car</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;电动汽车的独特之处&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_init_</span>(<span class="params">self, make, model, year</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化父类的属性&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">super</span>()._init_(make, model, year)</span><br><span class="line"></span><br><span class="line">my_tesla = ElectricCar(<span class="string">&#x27;tesla&#x27;</span>, <span class="string">&#x27;model s&#x27;</span>, <span class="number">2016</span>)</span><br><span class="line"><span class="built_in">print</span>(my_tesla.get_descriptive_name())</span><br></pre></td></tr></table></figure>

<p>创建子类时，父类必须包含在当前文件中，且位于子类前面。定义子类时，必须在括号内指定父类的名称。方法_init_()接受创建Car实例所需的信息。</p>
<p>super()函数是帮助Python将父类和子类关联起来。该语句让Python调用ElectricCar的父类的方法_init()_，让ElectricCar实例包含父类的所有属性。父类也称超类(superclass)</p>
<h3 id="9-3-3-给子类定义属性和方法"><a href="#9-3-3-给子类定义属性和方法" class="headerlink" title="9.3.3 给子类定义属性和方法"></a>9.3.3 给子类定义属性和方法</h3><p>一个类继承另一个类后，可添加区分子类和父类所需的新属性和方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>():</span><br><span class="line">    --snip--</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ElectricCar</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;电动汽车的独特之处&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_init_</span>(<span class="params">self, make, model, year</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        电动汽车的独特之处</span></span><br><span class="line"><span class="string">        初始化父类的属性，再初始化电动汽车特有的属性</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">super</span>()._init_(make, model, year)</span><br><span class="line">        self.battery_size = <span class="number">70</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">describe_battery</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;打印一条描述电瓶容量的消息&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;This car has a &quot;</span> + <span class="built_in">str</span>(self.battery_size) + <span class="string">&quot;-kwh battery.&quot;</span>)</span><br><span class="line"></span><br><span class="line">my_tesla = ElectricCar(<span class="string">&#x27;tesla&#x27;</span>, <span class="string">&#x27;model s&#x27;</span>, <span class="number">2016</span>)</span><br><span class="line"><span class="built_in">print</span>(my_tesla.get_descriptive_name())</span><br><span class="line">my_tesla.describe_battery()</span><br></pre></td></tr></table></figure>

<p>上述代码添加了新属性self.battery_size，并设置其初始值，根据ElectricCar类创建的所有实例都将包含这个属性，但所有Car实例都不包含它。</p>
<h3 id="9-3-4-重写父类的方法"><a href="#9-3-4-重写父类的方法" class="headerlink" title="9.3.4 重写父类的方法"></a>9.3.4 重写父类的方法</h3><p>可在子类中定义一个这样的方法，即它与要重写的父类方法同名。这样，Python将不会考虑这个父类方法，而只关注在子类中定义的相应方法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ElectricCar</span>(<span class="title class_ inherited__">Car</span>):</span><br><span class="line">    --snip--</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fill_gas_tank</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;电动汽车没有油箱&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;This car doesn&#x27;t need a gas tank!&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>结果，如果有人对电动汽车调用方法fill_gas_tank()，Python将忽略Car类中的方法fill_gas_tank()，转而运行上述代码。使用继承中，可让子类保留从父类那里继承而来的精华，并提出不剔除不需要的糟粕</p>
<h3 id="9-3-5-将实例用作属性"><a href="#9-3-5-将实例用作属性" class="headerlink" title="9.3.5 将实例用作属性"></a>9.3.5 将实例用作属性</h3><p>将类的一部分作为一个独立的类提取出来，可将大型类拆分成多个协同工作的小类</p>
<p>在给ElectricCar类添加细节时，可将这些属性和方法提取出来，放到另一个名为Battery的类中，并将一个Battery实例用作ElectricCar类的一个属性</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>():</span><br><span class="line">    --snip--</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Battery</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;一次模拟电动汽车电瓶的简单尝试&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_init_</span>(<span class="params">self, battery_size=<span class="number">70</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化电瓶的属性&quot;&quot;&quot;</span></span><br><span class="line">        self.battery_size = battery_size</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">description_battery</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;打印一条描述电瓶容量的消息&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;This car has a &quot;</span> + <span class="built_in">str</span>(self.battery_size) + <span class="string">&quot;-kwh battery.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ElectricCar</span>(<span class="title class_ inherited__">Car</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;电动汽车的独特之处&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_init_</span>(<span class="params">self, make, model, year</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        初始化父类的属性，再初始化电动汽车特有的属性</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">super</span>()._init_(make, model, year)</span><br><span class="line">        self.battery = Battery()</span><br><span class="line"></span><br><span class="line">my_tesla = ElectricCar(<span class="string">&#x27;tesla&#x27;</span>, <span class="string">&#x27;model s&#x27;</span>, <span class="number">2016</span>)</span><br><span class="line">my_tesla.batter.describe_battery()</span><br></pre></td></tr></table></figure>

<p>上述代码首先定义了一个名为Battery的新类，它没有继承类。其中的_init_()除self外，还有另一个形参battery_size。这个形参是可选的，如果没有给它提供值，电瓶容量将被设置为70。方法describe_battery()也移到了这个类中。</p>
<p>在ElectricCar类中，添加了一个名为self.battery的属性。这行代码让Python创建一个新的Battery实例(由于没有指定尺寸，因此为默认值70)，并将该实例存储在属性self.battery中。每当方法_init_()被调用时，都将执行该操作；因此仙子啊每个ElectricCar实例都包含一个自动创建的Battery实例。</p>
<p>我们创建一辆电动汽车，并将存储在变量my_tesla中。要描述电瓶时，需要使用电动汽车的属性battery:</p>
<p>my_tesla.battery.describe_battery()</p>
<p>这行代码让Python在实例my_tesla中查找属性battery，并对存储在该属性中的Battery实例调用方法describe_battery()</p>
<p>下面给Battery类添加一个方法，它根据电瓶容量报告汽车的续航里程</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>():</span><br><span class="line">    --snip--</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Battery</span>():</span><br><span class="line">    --snip--</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_range</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;打印一条消息，指出电瓶的续航里程&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> self.battery_size == <span class="number">70</span>:</span><br><span class="line">            <span class="built_in">range</span> = <span class="number">240</span></span><br><span class="line">        <span class="keyword">elif</span> self.battery_size == <span class="number">85</span>:</span><br><span class="line">            <span class="built_in">range</span> = <span class="number">270</span></span><br><span class="line">        message = <span class="string">&quot;This car can go approximately &quot;</span> + <span class="built_in">str</span>(<span class="built_in">range</span>)</span><br><span class="line">        message += <span class="string">&quot;miles on a full charge.&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(message)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ElectricCar</span>(<span class="title class_ inherited__">Car</span>):</span><br><span class="line">    --snip--</span><br><span class="line"></span><br><span class="line">my_tesla = ElectricCar(<span class="string">&#x27;tesla&#x27;</span>, <span class="string">&#x27;model s&#x27;</span>, <span class="number">2016</span>)</span><br><span class="line"><span class="built_in">print</span>(my_tesla.get_descriptive_name())</span><br><span class="line">my_tesla.battery..describe_battery()</span><br><span class="line">my_tesla.battery.get_range()</span><br></pre></td></tr></table></figure>

<h2 id="9-4-导入类"><a href="#9-4-导入类" class="headerlink" title="9.4 导入类"></a>9.4 导入类</h2><p>Python允许将类存储在模块中，然后在主程序中导入所需的模块</p>
<h3 id="9-4-1-导入单个类"><a href="#9-4-1-导入单个类" class="headerlink" title="9.4.1 导入单个类"></a>9.4.1 导入单个类</h3><p>下面创建一个只包含Car类的模块，将Car类存储在一个名为car.py的模块中，该模块将覆盖前面使用的文件car.py。从这之后，使用该模块的程序都必须使用更具体的文件名，如my_car.py</p>
<p>car.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;一个可用于表示汽车的类&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;一次模拟汽车的简单尝试&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_init_</span>(<span class="params">self, make, model, year</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化描述汽车的属性&quot;&quot;&quot;</span></span><br><span class="line">        self.make = make </span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year </span><br><span class="line">        self.odometer_reading = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_descriptive_name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回整洁的描述性名称&quot;&quot;&quot;</span></span><br><span class="line">        long_name = <span class="built_in">str</span>(self.year) + <span class="string">&#x27; &#x27;</span> + self.make + <span class="string">&#x27; &#x27;</span> + self.model</span><br><span class="line">        <span class="keyword">return</span> long_name.title()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">read_odometer</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;打印一条消息，指出汽车的里程&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;This car has &quot;</span> + <span class="built_in">str</span>(self.odometer_reading) + <span class="string">&quot; miles on it.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update_odometer</span>(<span class="params">self, mileage</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        将里程表读数设置为指定的值</span></span><br><span class="line"><span class="string">        拒绝将里程表往回拨</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> mileage &gt;= self.odometer_reading:</span><br><span class="line">            self.odometer_reading = mileage </span><br><span class="line">        <span class="keyword">elif</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;You can&#x27;t roll back an odometer!&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">increment_odometer</span>(<span class="params">self, miles</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;将里程表读数增加指定的量&quot;&quot;&quot;</span></span><br><span class="line">        self.odometer_reading += miles</span><br></pre></td></tr></table></figure>

<p>代码开头部分 “””一个可用于表示汽车的类””” 是一个模块级文档字符串，对该模块的内容做简要描述</p>
<p>下面创建一个文件————my_car.py，在其中导入Car类并创建其实例</p>
<p>my_car.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> car <span class="keyword">import</span> Car</span><br><span class="line"></span><br><span class="line">my_new_car = Car(<span class="string">&#x27;audi&#x27;</span>, <span class="string">&#x27;a4&#x27;</span>, <span class="number">2016</span>)</span><br><span class="line"><span class="built_in">print</span>(my_new_car.get_descriptive_name())</span><br><span class="line"></span><br><span class="line">my_new_car.odometer_reading = <span class="number">23</span></span><br><span class="line">my_new_car.read_odometer()</span><br></pre></td></tr></table></figure>

<h3 id="9-4-2-在一个模块中存储多个类"><a href="#9-4-2-在一个模块中存储多个类" class="headerlink" title="9.4.2 在一个模块中存储多个类"></a>9.4.2 在一个模块中存储多个类</h3><p>类Battery和ElectricCar类加入模块car.py中</p>
<p>car.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;一组用于表示燃油汽车和电动汽车的类&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>():</span><br><span class="line">    --snip--</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Battery</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;一次模拟电动汽车电瓶的简单尝试&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_init_</span>(<span class="params">self, battery_size=<span class="number">70</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化电瓶的属性&quot;&quot;&quot;</span></span><br><span class="line">        self.battery_size = battery_size</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">describe_battery</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;打印一条描述电瓶容量的消息&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;This car has a &quot;</span> + <span class="built_in">str</span>(self.battery_size) + <span class="string">&quot;-kWh battery.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_range</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;打印一条描述电瓶续航里程的消息&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> self.battery_size = <span class="number">70</span>:</span><br><span class="line">            <span class="built_in">range</span> = <span class="number">240</span></span><br><span class="line">        <span class="keyword">elif</span> self.battery_size = <span class="number">85</span>:</span><br><span class="line">            <span class="built_in">range</span> = <span class="number">270</span></span><br><span class="line"></span><br><span class="line">        message = <span class="string">&quot;This car can go approximately &quot;</span> + <span class="built_in">str</span>(<span class="built_in">range</span>)</span><br><span class="line">        message += <span class="string">&quot; miles on a full charge&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(message)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ElectricCar</span>(<span class="title class_ inherited__">Car</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;模拟电动汽车的独特之处&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, make, model, year</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化父类的属性，再初始化电动汽车特有的属性&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(make, model, year)</span><br><span class="line">        self.battery = Battery()</span><br></pre></td></tr></table></figure>

<p>新建一个my_electric_car.py文件，导入ElectricCar类，并创建一辆电动汽车</p>
<p>my_electric_car.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> car <span class="keyword">import</span> ElectricCar</span><br><span class="line"></span><br><span class="line">my_tesla = ElectricCar(<span class="string">&#x27;tesla&#x27;</span>, <span class="string">&#x27;model s&#x27;</span>, <span class="number">2016</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(my_tesla.get_descriptive_name())</span><br><span class="line">my_tesla.battery.describe_battery()</span><br><span class="line">my_tesla.battery.get_range()</span><br></pre></td></tr></table></figure>

<h3 id="9-4-3-从一个模块中导入多个类"><a href="#9-4-3-从一个模块中导入多个类" class="headerlink" title="9.4.3 从一个模块中导入多个类"></a>9.4.3 从一个模块中导入多个类</h3><p>my_cars.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> car <span class="keyword">import</span> Car, ElectricCar</span><br><span class="line"></span><br><span class="line">my_beetle = Car(<span class="string">&#x27;volkswagen&#x27;</span>, <span class="string">&#x27;beetle&#x27;</span>, <span class="number">2016</span>)</span><br><span class="line"><span class="built_in">print</span>(my_beetle.get_descriptive_name())</span><br><span class="line"></span><br><span class="line">my_tesla = ElectricCar(<span class="string">&#x27;tesla&#x27;</span>, <span class="string">&#x27;roadster&#x27;</span>, <span class="number">2016</span>)</span><br><span class="line"><span class="built_in">print</span>(my_tesla.get_descriptive_name())</span><br></pre></td></tr></table></figure>

<h3 id="9-4-4-导入整个模块"><a href="#9-4-4-导入整个模块" class="headerlink" title="9.4.4 导入整个模块"></a>9.4.4 导入整个模块</h3><p>导入整个模块，再使用句点表示法访问需要的类。由于创建类实例的代码都包含模块名，因此不会与当前文件使用的任何名称发生冲突。</p>
<p>my_cars.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> car</span><br><span class="line"></span><br><span class="line">my_beetle = car.Car(<span class="string">&#x27;volkswagen&#x27;</span>, <span class="string">&#x27;beetle&#x27;</span>, <span class="number">2016</span>)</span><br><span class="line"><span class="built_in">print</span>(my_beetle.get_descriptive_name())</span><br><span class="line"></span><br><span class="line">my_tesla = car.ElectricCar(<span class="string">&#x27;tesla&#x27;</span>, <span class="string">&#x27;roadster&#x27;</span>, <span class="number">2016</span>)</span><br><span class="line"><span class="built_in">print</span>(my_get_descriptive_name())</span><br></pre></td></tr></table></figure>

<p>上述代码使用语法module_name.class_name访问需要的类</p>
<h3 id="9-4-5-导入模块中的所有类"><a href="#9-4-5-导入模块中的所有类" class="headerlink" title="9.4.5 导入模块中的所有类"></a>9.4.5 导入模块中的所有类</h3><p>from module_name import *</p>
<h1 id="10-文件和异常"><a href="#10-文件和异常" class="headerlink" title="10.文件和异常"></a>10.文件和异常</h1><h2 id="10-1-从文件中读取数据"><a href="#10-1-从文件中读取数据" class="headerlink" title="10.1 从文件中读取数据"></a>10.1 从文件中读取数据</h2><h3 id="10-1-1-读取整个文件"><a href="#10-1-1-读取整个文件" class="headerlink" title="10.1.1 读取整个文件"></a>10.1.1 读取整个文件</h3><p>file_reader.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;pi_digits.txt&#x27;</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    contents = file_object.read()</span><br><span class="line">    <span class="built_in">print</span>(contents)</span><br></pre></td></tr></table></figure>

<p>函数open()接受一个参数：要打开的文件的名称。Python在当前执行的文件所在的目录中查找指定的文件。在上述示例中，当前运行的是file_reader.py，因此Python在file_reader.py所在的目录中查找pi_digits.txt。</p>
<p>函数open()返回一个表示文件的对象。</p>
<p>关键字with在不再需要访问文件后将其关闭。该程序中，我们调用了open()，但是未调用close()，若这样做时，如果程序存在bug，导致close()语句未执行，文件将不会关闭。</p>
<p>方法read()读取这个文件的全部内容，并将其作为一个长长的字符串存储在变量contents中。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">3.1415923535</span></span><br><span class="line">  <span class="number">8979323846</span></span><br><span class="line">  <span class="number">2643383279</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>结果，多出来一个空行，因为read()到达文件末尾时返回一个空字符串，而将这个空字符串显示出来时就是一个空行。要删除末尾的空行，可在print语句中使用rstrip():</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;pi_digits.txt&#x27;</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    contents = file_object.read()</span><br><span class="line">    <span class="built_in">print</span>(contents.rstrip())</span><br></pre></td></tr></table></figure>

<h3 id="10-1-2-文件路径"><a href="#10-1-2-文件路径" class="headerlink" title="10.1.2 文件路径"></a>10.1.2 文件路径</h3><p>例如将程序文件存储在了文件夹python_work中，而在文件夹python_work中，有一个名为text_files的文件夹，用于存储程序文件操作的文本文件。因此，可以使用相对路径来打开该文件夹中的文件。相对文件路径让Python到指定的位置去查找，而该位置是相对于当前运行的程序所在目录的。</p>
<p>在Linux和OS X中，可以如下编写:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;text_files/filename.txt&#x27;</span>) <span class="keyword">as</span> file_object:</span><br></pre></td></tr></table></figure>

<p>上述代码让Python到文件夹python_work下的文件夹text_files中去查找指定的.txt文件。在Windows系统中，在文件路径中使用反斜杠 \ 而不是斜杠 / :</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;text_files\filename.txt&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>在相对路径行不通时，可以选择绝对路径。绝对路径通常比相对路径更长，因此将其存储在一个变量中，再将该变量传递给open()会有帮助。在Linux和OS X中，绝对路径如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">file_path = <span class="string">&#x27;/home/ehmatthes/other_files/text_files/filename.txt&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(file_path) <span class="keyword">as</span> file_object:</span><br></pre></td></tr></table></figure>

<p>而在Windows系统中，它们类似于下面这样：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">file_path = <span class="string">&#x27;C:\Users\ehmatthes\other_files\text_files\filename.txt&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(file_path) <span class="keyword">as</span> file_object:</span><br></pre></td></tr></table></figure>

<h3 id="10-1-3-逐行读取"><a href="#10-1-3-逐行读取" class="headerlink" title="10.1.3 逐行读取"></a>10.1.3 逐行读取</h3><p>要以每次一行的方式检查文件，可对文件对象使用for循环：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">filename = <span class="string">&#x27;pi_digits.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> file_object:</span><br><span class="line">        <span class="built_in">print</span>(line)</span><br></pre></td></tr></table></figure>

<p>上述代码调用open()后，将一个表示文件及其内容的休想存储到了变量file_object中。这里也使用了关键字with，让Python负责妥善地打开和关闭文件。</p>
<p>我们打印每一行时，发现空白行更多了：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">3.1415923535</span></span><br><span class="line"></span><br><span class="line">  <span class="number">8979323846</span></span><br><span class="line"></span><br><span class="line">  <span class="number">2643383279</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>原因是每行的末尾都有一个看不见的换行符，而print语句也会加上一个换行符，因此每行末尾都有两个换行符：一个来自文件，另一个来自print语句。要消除这些多余的空白行，可在print语句中使用rstrip()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">filename = <span class="string">&#x27;pi_digits.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> file_object:</span><br><span class="line">        <span class="built_in">print</span>(line.rstrip())</span><br></pre></td></tr></table></figure>

<h3 id="10-1-4-创建一个包含文件各行内容的列表"><a href="#10-1-4-创建一个包含文件各行内容的列表" class="headerlink" title="10.1.4 创建一个包含文件各行内容的列表"></a>10.1.4 创建一个包含文件各行内容的列表</h3><p>使用关键字with时，open()返回的文件对象只在with代码块内可用。如果要在with代码块外访问文件的内容，可在with代码块内将文件的各行存储在一个列表中，并在with代码块外使用该列表：你可以立即处理文件的各个部分，也可以推迟到程序后面再处理。</p>
<p>下面示例在with代码块中将文件pi_digits.txt的各行存储在一个列表中，再在with代码块外打印他们：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">filename = <span class="string">&#x27;pi_digits.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    lines = file_object.readlines()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    <span class="built_in">print</span>(lines.rstrip())</span><br></pre></td></tr></table></figure>

<p>方法readlines()从文件中读取每一行，并将其存储在一个列表；然后该列表被存储到变量lines中；在with代码块外，我们仍然可以使用。</p>
<h3 id="10-1-5-使用文件的内容"><a href="#10-1-5-使用文件的内容" class="headerlink" title="10.1.5 使用文件的内容"></a>10.1.5 使用文件的内容</h3><p>首先，创建一个字符串，它包含文件中存储的所有数字，且没有任何空格：</p>
<p>pi_string.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">filename = <span class="string">&#x27;pi_digits.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    lines = file_object.readlines()</span><br><span class="line"></span><br><span class="line">pi_string = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    pi_string += line.rstrip()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(pi_string)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(pi_string))</span><br></pre></td></tr></table></figure>

<p>过程，首先打开文件，将其中的所有行都存储在一个列表中。同时创建了一个变量pi_string，用于存储圆周率的值，之后使用一个循环将各行都加入pi_string，并删除每行末尾的换行符，最后打印这个字符串及其长度：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">3.1415926535</span> <span class="number">8979323846</span> <span class="number">2643383279</span></span><br><span class="line"><span class="number">36</span></span><br></pre></td></tr></table></figure>

<p>在变量pi_string存储的字符串中，包含原来位于每行左边的空格，删除空格使用strip()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">filename = <span class="string">&#x27;pi_digits.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    lines = file_object.readlines()</span><br><span class="line"></span><br><span class="line">pi_string = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    pi_string += line.strip()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(pi_string)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(pi_string))</span><br></pre></td></tr></table></figure>

<p>注意： 读取文本文件时，Python将其中的所有文本都解读为字符串。如果读取的是数字，并要将其作为数值使用，就必须使用函数int()将其转换为整数，或使用函数float()将其转换为浮点数</p>
<h3 id="10-1-6-包含一百万位的大型文件"><a href="#10-1-6-包含一百万位的大型文件" class="headerlink" title="10.1.6 包含一百万位的大型文件"></a>10.1.6 包含一百万位的大型文件</h3><p>pi_string.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">filename = <span class="string">&#x27;pi_million_digits.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    lines = file_object.readlines()</span><br><span class="line"></span><br><span class="line">pi_string = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    pi_string += line.strip()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(pi_string[:<span class="number">52</span>] + <span class="string">&quot;...&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(pi_string))</span><br></pre></td></tr></table></figure>

<h2 id="10-2-写入文件"><a href="#10-2-写入文件" class="headerlink" title="10.2 写入文件"></a>10.2 写入文件</h2><h3 id="10-2-1-写入空文件"><a href="#10-2-1-写入空文件" class="headerlink" title="10.2.1 写入空文件"></a>10.2.1 写入空文件</h3><p>在调用open()时提供另一个实参’a’</p>
<p>write_message.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fielname = <span class="string">&#x27;programming.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    file_object.write(<span class="string">&quot;I love programming.&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>示例中，调用open()时提供了两个实参。第一个实参是要打开的文件的名名称；第二个实参是(‘w’)，即以写入模式打开文件。</p>
<p>打开文件时，可指定读取模式(‘r’)、写入模式(‘w’)、附加模式(‘a’)或能偶读取和写入文件的模式(‘r+’)。默认以只读模式打开文件。</p>
<p>注意：Python只能将字符串写入文本文件。要将数值存储到文本文件中，必须先使用函数str()将其转换为字符串格式</p>
<h3 id="10-2-2-写入多行"><a href="#10-2-2-写入多行" class="headerlink" title="10.2.2 写入多行"></a>10.2.2 写入多行</h3><p>函数write()不会在写入的文本末尾添加换行符</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">filename = <span class="string">&#x27;programming.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    file_object.write(<span class="string">&quot;I love programming.&quot;</span>)</span><br><span class="line">    file_object.write(<span class="string">&quot;I love creating new games.&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>打开programming.txt，将发现两行内容挤在一起:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">I love programming. I love creating new games.</span><br></pre></td></tr></table></figure>

<p>每行字符串单独一行，在write()语句中包含换行符:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">filename = <span class="string">&#x27;programming.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    file_object.write(<span class="string">&quot;I love programming.\n&quot;</span>)</span><br><span class="line">    file_object.write(<span class="string">&quot;I love creating new games.\n&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="10-2-3-附加到文件"><a href="#10-2-3-附加到文件" class="headerlink" title="10.2.3 附加到文件"></a>10.2.3 附加到文件</h3><p>给文件添加内容，而不是覆盖原有内容，可以附加模式打开文件。以附加模式打开文件时，Python不会在返回文件对象前清空文件，而写入到文件的行都将添加到文件末尾。如果指定文件不存在，则会自动创建一个空文件</p>
<p>下面修改write_meesage.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">filename = <span class="string">&#x27;programming.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;a&#x27;</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    file_object.write(<span class="string">&quot;I also love finding meaning in large datasets.\n&quot;</span>)</span><br><span class="line">    file_object.write(<span class="string">&quot;I love creating apps that can run in a browser.\n&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="10-3-异常"><a href="#10-3-异常" class="headerlink" title="10.3 异常"></a>10.3 异常</h2><p>Python使用被称为异常的特殊对象来管理程序执行期间发生的错误。每当发生让Python不知所措的错误时，它都会创建一个异常对象。</p>
<p>异常使用try-except代码块处理的。try-except代码块让Python执行指定的操作，同时告诉Python发生异常时该怎么办。</p>
<h3 id="10-3-1-处理ZeroDivisionError异常"><a href="#10-3-1-处理ZeroDivisionError异常" class="headerlink" title="10.3.1 处理ZeroDivisionError异常"></a>10.3.1 处理ZeroDivisionError异常</h3><p>division.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">5</span>/<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<h3 id="10-3-2-使用try-except代码块"><a href="#10-3-2-使用try-except代码块" class="headerlink" title="10.3.2 使用try-except代码块"></a>10.3.2 使用try-except代码块</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">5</span>/<span class="number">0</span>)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;You can&#x27;t divide by zero&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>如果try代码块中的代码运行没有问题，则会跳过except代码块；如果try代码块中的代码导致了错误，Python将查找这样的except代码块，并运行其中的代码，即其中指定的错误与引发的错误相同</p>
<h3 id="10-3-3-使用异常避免崩溃"><a href="#10-3-3-使用异常避免崩溃" class="headerlink" title="10.3.3 使用异常避免崩溃"></a>10.3.3 使用异常避免崩溃</h3><p>下面创建一个只执行出发运算的简单计算器：</p>
<p>division.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Give me two numbers, and I&#x27;ll divide them.&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Enter &#x27;q&#x27; to quit.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    first_number == <span class="built_in">input</span>(<span class="string">&quot;\nFirst number: &quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> first_number == <span class="string">&#x27;q&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    second_number == <span class="built_in">input</span>(<span class="string">&quot;Second number: &quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> second_number == <span class="string">&#x27;q&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    answer = <span class="built_in">int</span>(first_number) / <span class="built_in">int</span>(second_number)</span><br><span class="line">    <span class="built_in">print</span>(answer)</span><br></pre></td></tr></table></figure>

<h3 id="10-3-4-else代码块"><a href="#10-3-4-else代码块" class="headerlink" title="10.3.4 else代码块"></a>10.3.4 else代码块</h3><p>通过将可能引发错误的代码放到try-except代码块中，可提高这个程序抵御错误的能力。下面示例包含一个else代码块；依赖于try代码块成功执行的代码都应放到else代码块中：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Give me two numbers, and I&#x27;ll divide them.&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Enter &#x27;q&#x27; to quit.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    first_number == <span class="built_in">input</span>(<span class="string">&quot;\nFirst number: &quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> first_number == <span class="string">&#x27;q&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    second_number == <span class="built_in">input</span>(<span class="string">&quot;Second number: &quot;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        answer = <span class="built_in">int</span>(first_number) / <span class="built_in">int</span>(second_number)</span><br><span class="line">    <span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;You can&#x27;t divide by 0!&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(answer)</span><br></pre></td></tr></table></figure>

<p>依赖于try代码块成功执行的代码都放在else代码块中。</p>
<p>try-except-else的工作原理：Python尝试执行try代码块中的代码，只有可能引发异常的代码才需要放在try语句中。有时，有一些仅在try代码块成功执行时才需要运行的代码；这些代码应放在else代码块中。except代码块告诉Python，如果它尝试运行try代码块中的代码时引发了指定的异常，该怎么办。</p>
<h3 id="10-3-5-处理FileNotFoundError异常"><a href="#10-3-5-处理FileNotFoundError异常" class="headerlink" title="10.3.5 处理FileNotFoundError异常"></a>10.3.5 处理FileNotFoundError异常</h3><p>尝试读取一个不存在的文件。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">filename = <span class="string">&#x27;alice.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">    contents = f_obj.read()</span><br></pre></td></tr></table></figure>

<p>在上述示例中，错误函数open()导致的，因此需要将try语句放在包含open()的代码行之前:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">filename = <span class="string">&#x27;alice.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">        contents = f_obj.read()</span><br><span class="line"><span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">    msg = <span class="string">&quot;Sorry, the file &quot;</span> + filename + <span class="string">&quot; dose not exist.&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(msg)</span><br></pre></td></tr></table></figure>

<h3 id="10-3-6-分析文本"><a href="#10-3-6-分析文本" class="headerlink" title="10.3.6 分析文本"></a>10.3.6 分析文本</h3><p>下面提取童话Alice in Wonderland的文本，并尝试计算它包含多少个单词，使用方法split()，它根据一个字符串创建于一个单词列表。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; title = <span class="string">&quot;Alice in Wonderland&quot;</span></span><br><span class="line">&gt;&gt;&gt; title.split()</span><br><span class="line">[<span class="string">&#x27;Alice&#x27;</span>, <span class="string">&#x27;in&#x27;</span>, <span class="string">&#x27;Wonderlan&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>方法split以空格为分隔符将字符串拆分成多个部分，并将这些部分都存储在一个列表中。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">filename = <span class="string">&#x27;alice.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">        contents = f_obj.read()</span><br><span class="line"><span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">    msg = <span class="string">&quot;Sorry, the file &quot;</span> + filename + <span class="string">&quot; does not exist.&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(msg)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># 计算文件大致包含多少个单词</span></span><br><span class="line">    words = contents.split()</span><br><span class="line">    num_words = <span class="built_in">len</span>(words)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;The file &quot;</span> + filename + <span class="string">&quot; has about &quot;</span> + <span class="built_in">str</span>(num_words) + <span class="string">&quot; words.&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="10-3-7-使用多个文件"><a href="#10-3-7-使用多个文件" class="headerlink" title="10.3.7 使用多个文件"></a>10.3.7 使用多个文件</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">count_words</span>(<span class="params">filename</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;计算一个文件大致包含多少个单词&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">            contents = f_obj.read()</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        msg = <span class="string">&quot;Sorry, the file &quot;</span> + filename + <span class="string">&quot; does not exist.&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(msg)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 计算文件大致包含多少个单词</span></span><br><span class="line">        words = contents.split()</span><br><span class="line">        num_words = <span class="built_in">len</span>(words)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;The file &quot;</span> + filename + <span class="string">&quot; has about &quot;</span> + <span class="built_in">str</span>(num_words) + <span class="string">&quot; words.&quot;</span>)</span><br><span class="line"></span><br><span class="line">filename = <span class="string">&#x27;alice.txt&#x27;</span></span><br><span class="line">count_words(filename)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">count_words</span>(<span class="params">filename</span>):</span><br><span class="line">    --snip--</span><br><span class="line"></span><br><span class="line">filenames = [<span class="string">&#x27;alice.txt&#x27;</span>, <span class="string">&#x27;siddhartha.txt&#x27;</span>, <span class="string">&#x27;moby_dick.txt&#x27;</span>, <span class="string">&#x27;little_women.txt&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> filename <span class="keyword">in</span> filenames:</span><br><span class="line">    count_words(filename)</span><br></pre></td></tr></table></figure>

<h3 id="10-4-8-失败时一声不吭"><a href="#10-4-8-失败时一声不吭" class="headerlink" title="10.4.8 失败时一声不吭"></a>10.4.8 失败时一声不吭</h3><p>Python有一个pass语句，可在代码块中使用来告诉Python什么都不做</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">count_words</span>(<span class="params">filename</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        --snip--</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        --snip--</span><br></pre></td></tr></table></figure>

<h3 id="10-4-存储数据"><a href="#10-4-存储数据" class="headerlink" title="10.4 存储数据"></a>10.4 存储数据</h3><p>一种简单的方式是使用模块json来存储数据</p>
<p>JSON(JavaScript Object Notation)</p>
<h3 id="10-4-1-使用json-dump-和json-load"><a href="#10-4-1-使用json-dump-和json-load" class="headerlink" title="10.4.1 使用json.dump()和json.load()"></a>10.4.1 使用json.dump()和json.load()</h3><p>下面编写一个存储一组数字的简短程序，再编写一个将这些数字读取到内存中的程序。第一个程序使用json.dump()来存储这组数字，而第二个程序将使用json.load()</p>
<p>函数json.dump()接受两个实参：要存储的数据以及可用于存储数据的文件对象</p>
<p>number_writer.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">numbers = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">11</span>, <span class="number">13</span>]</span><br><span class="line"></span><br><span class="line">filename = <span class="string">&#x27;numbers.json&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">    json.dump(numbers, f_obj)</span><br></pre></td></tr></table></figure>

<p>先导入模块json，再创建一个数字列表。通常使用文件扩展名.json来指出文件存储的数据为JSON格式。</p>
<p>下面编写一个程序，使用json.load()将这个列表读取到内存中</p>
<p>numbers_reader.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">filename = <span class="string">&#x27;numbers.json&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">    numbers = json.load(f_obj)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(numbers)</span><br></pre></td></tr></table></figure>

<p>上面代码我们读取的是前面写入的文件。我们使用json.load()加载存储在numbers.json中的信息，并将其存储在变量numbers中。</p>
<h3 id="10-4-2-保存和读取用户生成的数据"><a href="#10-4-2-保存和读取用户生成的数据" class="headerlink" title="10.4.2 保存和读取用户生成的数据"></a>10.4.2 保存和读取用户生成的数据</h3><p>下面示例：用户首次运行程序时被提示出入自己的名字，这样再次运行程序时就记住他了</p>
<p>remember_me.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">username = <span class="built_in">input</span>(<span class="string">&quot;What is your name?&quot;</span>)</span><br><span class="line"></span><br><span class="line">filename = <span class="string">&#x27;username.json&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">    json.dump(username, f_obj)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;We&#x27;ll remember you when you come back, &quot;</span> + username + <span class="string">&quot;!&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>再编写一个程序，向其名字被存储的用户发出问候</p>
<p>greet_user.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">filename = <span class="string">&#x27;username.json&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">    username = json.load(f_obj)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Welconme back, &quot;</span> + username + <span class="string">&quot;!&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>下面将两个程序合并一起(remember_me.py)，程序运行时，我们先尝试从文件username.json中获取用户名，因此首先编写一个尝试恢复用户名的try代码块。如果这个文件不存在，我们就在except代码块中提示用户输入用户名，并将其存储在username.json中，以便程序再次运行时能够获取它</p>
<p>remember_me.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="comment"># 如果以前存储了用户名，就加载它</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 否则，就提示用户输入用户名并存储</span></span><br><span class="line">filename = <span class="string">&#x27;username.json&#x27;</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">        username = json.load(f_obj)</span><br><span class="line"><span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">    username = <span class="built_in">input</span>(<span class="string">&quot;What is your name?&quot;</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">        json.dump(username, f_obj)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;We&#x27;ll remember you when you come back, &quot;</span> + username + <span class="string">&quot;!&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Welcome back, &quot;</span> + username + <span class="string">&quot;!&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="10-4-3-重构"><a href="#10-4-3-重构" class="headerlink" title="10.4.3 重构"></a>10.4.3 重构</h3><p>重构让代码更清晰，更易于理解，更容易扩展</p>
<p>重构remember_me.py，可将其大部分逻辑放到一个或多个函数中。</p>
<p>remember_me.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">greet_user</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;问候用户，并指出其名字&quot;&quot;&quot;</span></span><br><span class="line">    filename = <span class="string">&#x27;username.json&#x27;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">        username = json.load(f_obj)</span><br><span class="line"><span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">    username = <span class="built_in">input</span>(<span class="string">&quot;What is your name?&quot;</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">        json.dump(username, f_obj)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;We&#x27;ll remember you when you come back, &quot;</span> + username + <span class="string">&quot;!&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Welcome back, &quot;</span> + username + <span class="string">&quot;!&quot;</span>)</span><br><span class="line"></span><br><span class="line">greet_user()</span><br></pre></td></tr></table></figure>

<p>下面重构greet_user()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_stored_username</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;如果存储了用户名，就获取它&quot;&quot;&quot;</span></span><br><span class="line">    filename = <span class="string">&#x27;username.json&#x27;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">            username = json.load(f_obj)</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> username</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">greet_user</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;问候用户，并指出其名字&quot;&quot;&quot;</span></span><br><span class="line">    filename = <span class="string">&#x27;username.json&#x27;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">        username = json.load(f_obj)</span><br><span class="line"><span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">    username = <span class="built_in">input</span>(<span class="string">&quot;What is your name?&quot;</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">        json.dump(username, f_obj)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;We&#x27;ll remember you when you come back, &quot;</span> + username + <span class="string">&quot;!&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Welcome back, &quot;</span> + username + <span class="string">&quot;!&quot;</span>)</span><br><span class="line"></span><br><span class="line">greet_user()</span><br></pre></td></tr></table></figure>

<p>最后的代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_stored_username</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;如果存储了用户，就获取它&quot;&quot;&quot;</span></span><br><span class="line">    --snip--</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_new_username</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;提示用户输入用户名&quot;&quot;&quot;</span></span><br><span class="line">    username = <span class="built_in">input</span>(<span class="string">&quot;What is your name?&quot;</span>)</span><br><span class="line">    filename = <span class="string">&#x27;username.json&#x27;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">        json.dump(username, f_obj)</span><br><span class="line">    <span class="keyword">return</span> username</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">greet_user</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;问候用户，并指出其名字&quot;&quot;&quot;</span></span><br><span class="line">    username = get_stored_username()</span><br><span class="line">    <span class="keyword">if</span> username:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Welcome back, &quot;</span> + username + <span class="string">&quot;!&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        username = get_new_username()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;We&#x27;ll remember you when you come back, &quot;</span> + username + <span class="string">&quot;!&quot;</span>)</span><br><span class="line"></span><br><span class="line">greet_user()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>编程语言入门</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建Hexo博客</title>
    <url>/2023/01/09/%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h1 id="1-安装Node-js"><a href="#1-安装Node-js" class="headerlink" title="1. 安装Node.js"></a>1. 安装Node.js</h1><p>· URL: <a href="http://www.nodejs.org/">www.nodejs.org</a></p>
<h1 id="2-安装hexo"><a href="#2-安装hexo" class="headerlink" title="2. 安装hexo"></a>2. 安装hexo</h1><p>· 以管理员身份运行Git Bash</p>
<p>· 切换到淘宝镜像源</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
<p>· 安装hexo</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h1 id="3-使用hexo搭建博客"><a href="#3-使用hexo搭建博客" class="headerlink" title="3. 使用hexo搭建博客"></a>3. 使用hexo搭建博客</h1><p>· 创建一个目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ mkdir Blog</span><br></pre></td></tr></table></figure>
<p>· 用hexo命令初始化一个博客</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo init</span><br></pre></td></tr></table></figure>
<p>· 安装deployer部署插件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure>
<p>· 配置_config.yml文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/AxelHarness/AxelHarness.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>


<h1 id="4-关于SSH"><a href="#4-关于SSH" class="headerlink" title="4. 关于SSH"></a>4. 关于SSH</h1><h2 id="检查电脑上是否有SSH-KEY"><a href="#检查电脑上是否有SSH-KEY" class="headerlink" title="检查电脑上是否有SSH KEY"></a>检查电脑上是否有SSH KEY</h2><p>· 使用命令检查电脑上有没有.ssh文件夹</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">~/.ssh </span><br><span class="line">OR</span><br><span class="line">~/.ssh ls</span><br></pre></td></tr></table></figure>
<h2 id="创建SSH-KEY"><a href="#创建SSH-KEY" class="headerlink" title="创建SSH KEY"></a>创建SSH KEY</h2><p>· Open Git Bash<br/><br>· Generating a new SSH key and adding it to the ssh-agent</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t ed25519 -C &quot;your_email@example.com&quot;</span><br><span class="line"></span><br><span class="line">OR</span><br><span class="line"></span><br><span class="line">$ ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot;</span><br></pre></td></tr></table></figure>
<p>· Adding your SSH key to the ssh-agent<br/></p>
<ol>
<li>Ensure the ssh-agent is running<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># start the ssh-agent in the background</span><br><span class="line">$ eval &quot;$(ssh-agent -s)&quot;</span><br><span class="line">&gt; Agent pid 59566</span><br></pre></td></tr></table></figure></li>
<li>Add your SSH private key to the ssh-agent<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ssh-add ~/.ssh/id_ed25519</span><br></pre></td></tr></table></figure></li>
<li>Add the SSH key to your account on GitHub<br/></li>
</ol>
<p>· Adding a new SSH key to your account</p>
<ol>
<li>Copy the SSH public key to your clipboard<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ clip &lt; ~/.ssh/id_ed25519.pub</span><br><span class="line">  # Copies the contents of the id_ed25519.pub file to your clipboard</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo建站之设置SSH密钥</title>
    <url>/2021/03/27/hexo%E5%BB%BA%E7%AB%99%E4%B9%8B%E8%AE%BE%E7%BD%AESSH%E5%AF%86%E9%92%A5/</url>
    <content><![CDATA[<p>前言：本文转自<a href="https://blog.csdn.net/qq_43649223/article/details/106081223">《Github博客hexo建站之设置SSH密钥》by 暴走的山交</a></p>
<p>PS 建议使用Github时使用SSH连接，SSH keys是一种鉴定信任电脑的方式，同时不需要输入密码（我为啥还要一直输入。。。）</p>
<hr>
<h1 id="检查SSH-keys"><a href="#检查SSH-keys" class="headerlink" title="检查SSH keys"></a>检查SSH keys</h1><ol>
<li>检查电脑中是否存在 SSH keys，打开 git bash 输入：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ls -al ~/.ssh</span><br><span class="line"># 该指令会列出.ssh目录中的文件</span><br></pre></td></tr></table></figure>
<span id="more"></span></li>
<li>检查目录中是肉存在 id_rsa.pub 或者 id_dsa.pub，如果没有便创建新的 SSH keys，有的话则跳过创建步骤。</li>
</ol>
<h1 id="创建新的-SSH-key"><a href="#创建新的-SSH-key" class="headerlink" title="创建新的 SSH key"></a>创建新的 SSH key</h1><ol>
<li>为了创建新的 SSH key，复制下面代码，填上对应的E-mail。同时在弹出提示”Enter a file in which to save the key”，紧急南下回车键(Enter)继续。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</span><br><span class="line"># 创建一个 ssh key，用准备好的e-mail作为标签</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/c/Users/you/.ssh/id_rsa): [Press enter]</span><br></pre></td></tr></table></figure></li>
<li>输入密码<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Enter passphrase (empty for no passphrase): [Type a passphrase]</span><br><span class="line">Enter same passphrase again: [Type passphrase again]</span><br></pre></td></tr></table></figure></li>
<li>看到类似如下提示：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Your identification has been saved in /c/Users/you/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved in /c/Users/you/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@example.com</span><br></pre></td></tr></table></figure></li>
<li>在 ssh-代理上添加上你的新的密钥<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># start the ssh-agent in the background</span><br><span class="line">$ eval &quot;$(ssh-agent -s)&quot;</span><br><span class="line"># Agent pid 59566</span><br><span class="line">$ ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="在github账户上添加上-SSH-key"><a href="#在github账户上添加上-SSH-key" class="headerlink" title="在github账户上添加上 SSH key"></a>在github账户上添加上 SSH key</h1><ol>
<li>用任意编辑器，打开 ~/.ssh/id_rsa.pub 文件，手动把文件中的内容复制到粘贴板。</li>
<li>将内容粘贴到 github 里的 ssh key 设置中</li>
</ol>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><ol>
<li>为了确保正常工作，打开 git bash 输入<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br><span class="line"># Attempts to ssh to github</span><br></pre></td></tr></table></figure></li>
<li>忽略出现的警告</li>
<li>看到如下内容，大功告成<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hi username! You&#x27;ve successfully authenticated, but GitHub does not</span><br><span class="line">provide shell access.</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>ssh密钥</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>泰语学习记录</title>
    <url>/2023/01/10/%E6%B3%B0%E8%AF%AD%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>经济学人学习记录</title>
    <url>/2023/01/09/%E7%BB%8F%E6%B5%8E%E5%AD%A6%E4%BA%BA%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>西班牙语学习记录</title>
    <url>/2023/01/09/%E8%A5%BF%E7%8F%AD%E7%89%99%E8%AF%AD%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>解决hexo多端同步</title>
    <url>/2021/03/26/%E8%A7%A3%E5%86%B3hexo%E5%A4%9A%E7%AB%AF%E5%90%8C%E6%AD%A5/</url>
    <content><![CDATA[<p>前言：该篇转载自<a href="https://blog.csdn.net/Monkey_LZL/article/details/60870891?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.control&dist_request_id=&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.control">《如何解决github+Hexo的博客多终端同步问题》by monkey_lzl</a></p>
<hr>
<h1 id="终端1上的操作"><a href="#终端1上的操作" class="headerlink" title="终端1上的操作"></a>终端1上的操作</h1><p>目标：push本地文件夹Hexo中的必要文件到yourname.github.io的分支上<br>内容：利用github+hexo搭建博客时，新建一个Hexo文件夹，进行相关的配置，该部分主要是将这些配置文件托管到github项目的分支上，其中托管部分是用来进行多端同步的文件。<br><br/></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git init    //初始化本地仓库</span><br><span class="line">git add .    //或者 git add source 将必要的文件依次添加</span><br><span class="line">git commit -m &quot;Blog Source Hexo&quot;</span><br><span class="line">git branch hexo    //新建hexo分支</span><br><span class="line">git checkout hexo    //切换到hexo分支</span><br><span class="line">git remote add origin git@github.com:yourname/yourname.github.io.git    //将本地与github项目对接</span><br><span class="line">git push origin hexo    //push到github项目的hexo分支上</span><br></pre></td></tr></table></figure>
<p>结果：github项目中会多出一个hexo分支，这个分支便是用来多端同步的关键部分</p>
<span id="more"></span>

<h1 id="终端2上的操作"><a href="#终端2上的操作" class="headerlink" title="终端2上的操作"></a>终端2上的操作</h1><p>目标：完成clone和push更新<br>内容：在终端2上只需将github的hexo分支clone下来并进行初次的配置<br><br/></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone -b hexo git@github.com:yourname/yourname.github.io.git    //将github中的hexo分支clone到本地</span><br><span class="line">cd yourname.github.io    //切换到刚刚clone的文件夹内</span><br><span class="line">npm install    //切换到文件夹后进行安装必要的组件，无需ini</span><br><span class="line">hexo new post &quot;xxxx&quot;    //新建一个.md文件，进行编辑完成博客</span><br><span class="line">git add .    //git add source</span><br><span class="line">git commit -m &quot;xx&quot;</span><br><span class="line">git push origin hexo    //更新分支</span><br><span class="line">hexo g -d</span><br></pre></td></tr></table></figure>

<h1 id="不同终端以后的进行的操作"><a href="#不同终端以后的进行的操作" class="headerlink" title="不同终端以后的进行的操作"></a>不同终端以后的进行的操作</h1><p>内容：先进入自己相应的文件夹<br><br/></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git pull origin hexo    //先pull完成本地与远端的融合</span><br><span class="line">hexo new post &quot;new blog name&quot;</span><br><span class="line">git add .    //git add source</span><br><span class="line">git commit -m &quot;xx&quot;</span><br><span class="line">git push origin hexo</span><br><span class="line">hexo g -d</span><br><span class="line"></span><br><span class="line">对于需要合并时可以输入以下两条命令</span><br><span class="line">git reset --hard</span><br><span class="line">git pull origin hexo</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>github</tag>
        <tag>同步</tag>
      </tags>
  </entry>
  <entry>
    <title>赴命</title>
    <url>/2021/03/25/%E8%B5%B4%E5%91%BD/</url>
    <content><![CDATA[<center><font size=5 color="#6f2121"> 《赴命》——《Merlin》同人曲</font></center>
<font size4 color="#6f2121"><p style=" padding-left:500px; " >—— by 山猫</p></font>
<br/>
<font color="#d25858"><center>我曾一路 心怀赤诚</center></font>
<font color="#d25858"><center>跋山涉水而来 赴宿命一程</center></font>
<font color="#d25858"><center>结局跌进 孤舟无痕</center></font>
<font color="#d25858"><center>这是暂别只因重逢我仍在等</center></font>
<font color="#d25858"><center>我愿俯首 拜做你脚下忠臣</center></font>
<font color="#d25858"><center>愿溶心魂 铸你手中 王者之刃</center></font>
<font color="#d25858"><center>恕我曾负信任 隐术法至深</center></font>
<font color="#d25858"><center>追随你 已宣誓我虔诚</center></font>
<font color="#d25858"><center>我愿呼风唤雨穷尽怀中异能</center></font>
<font color="#d25858"><center>倾命以奉守护你座下的王城</center></font>
<font color="#d25858"><center>千年一瞬 双眸中烙印的意念更深</center></font>
<font color="#d25858"><center>我此生荣耀与困顿 只为你一人</center></font>
<span id="more"></span>
<br/>
<font color="#d25858"><center>我曾碌碌 沉溺混沌</center></font>
<font color="#d25858"><center>懵懂遇见那颗 闪耀的星辰</center></font>
<font color="#d25858"><center>不惧迷雾 遮蔽命轮</center></font>
<font color="#d25858"><center>这是一句 承诺贯以至情至真</center></font>
<font color="#d25858"><center>我愿默默无闻舔舐所受苦冷</center></font>
<font color="#d25858"><center>摒弃安逸字字诠释何为忠贞</center></font>
<font color="#d25858"><center>千年一瞬 双眸中尚存依稀的稚嫩</center></font>
<font color="#d25858"><center>我此生勇气与坚韧 只为你一人</center></font>
<br/>
<font color="#d25858"><center>所幸相遇不算太迟</center></font>
<font color="#d25858"><center>匆匆几年亦并肩相知</center></font>
<font color="#d25858"><center>容我最后在你眼前 袒露真实</center></font>
<font color="#d25858"><center>是你 最深重的恩赐</center>
<br/></font>
<font color="#d25858"><center>我愿默默无闻舔舐所受苦冷</center></font>
<font color="#d25858"><center>摒弃安逸字字诠释何为忠贞</center></font>
<font color="#d25858"><center>千年一瞬 远离空城此后硝烟罔闻</center></font>
<font color="#d25858"><center>我某天路过你归处 即是永恒</center></font>
<font color="#d25858"><center>我愿默默无闻舔舐所受苦冷</center></font>
<font color="#d25858"><center>摒弃安逸字字诠释何为忠贞</center></font>
<font color="#d25858"><center>千年一瞬 远离空城此后硝烟罔闻</center></font>
<font color="#d25858"><center>我某天路过你归处 或即是永恒</center></font>
<br/>
ps:Merlin is always be Merlin and Arthur will be back again.

<p><em>For the love of Camelot</em><br><em>Long Live Merthur</em></p>
]]></content>
      <categories>
        <category>AM</category>
      </categories>
      <tags>
        <tag>AM</tag>
        <tag>song</tag>
      </tags>
  </entry>
  <entry>
    <title>影视剧推荐</title>
    <url>/2022/02/11/%E9%9F%A9%E5%89%A7%E6%8E%A8%E8%8D%90/</url>
    <content><![CDATA[<p>韩剧：《假如爱有天意》、《请回答，1988》、《来自星星的你》</p>
<p>泰剧：《爱在暹罗》</p>
]]></content>
      <categories>
        <category>电视剧</category>
      </categories>
      <tags>
        <tag>韩剧</tag>
        <tag>泰剧</tag>
      </tags>
  </entry>
</search>
